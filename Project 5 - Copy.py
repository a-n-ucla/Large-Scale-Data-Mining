{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import nltk, string\n",
    "import matplotlib.pyplot as plt\n",
    "import json\n",
    "import datetime, time\n",
    "import pytz\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.neural_network import MLPRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
    "from sklearn.model_selection import GridSearchCV, KFold, GridSearchCV\n",
    "\n",
    "\n",
    "hashtags = 'tweets_#gohawks.txt', 'tweets_#gopatriots.txt', 'tweets_#nfl.txt', 'tweets_#patriots.txt', 'tweets_#sb49.txt', 'tweets_#superbowl.txt'\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Statistics for  tweets_#gohawks.txt\n",
      "Average number of tweets per hour:  292.48785062173687\n",
      "Average number of followers of users posting the tweets per tweet:  2217.9237355281984\n",
      "Average number of retweets per tweet:  2.0132093991319877\n",
      "Statistics for  tweets_#gopatriots.txt\n",
      "Average number of tweets per hour:  40.95469800606194\n",
      "Average number of followers of users posting the tweets per tweet:  1427.2526051635405\n",
      "Average number of retweets per tweet:  1.4081919101697078\n",
      "Statistics for  tweets_#nfl.txt\n",
      "Average number of tweets per hour:  397.0213901819841\n",
      "Average number of followers of users posting the tweets per tweet:  4662.37544523693\n",
      "Average number of retweets per tweet:  1.5344602655543254\n",
      "Statistics for  tweets_#patriots.txt\n",
      "Average number of tweets per hour:  750.89426460689\n",
      "Average number of followers of users posting the tweets per tweet:  3280.4635616550277\n",
      "Average number of retweets per tweet:  1.7852871288476946\n",
      "Statistics for  tweets_#sb49.txt\n",
      "Average number of tweets per hour:  1276.8570598680474\n",
      "Average number of followers of users posting the tweets per tweet:  10374.160292019487\n",
      "Average number of retweets per tweet:  2.52713444111402\n",
      "Statistics for  tweets_#superbowl.txt\n",
      "Average number of tweets per hour:  2072.11840170408\n",
      "Average number of followers of users posting the tweets per tweet:  8814.96799424623\n",
      "Average number of retweets per tweet:  2.3911895819207736\n"
     ]
    }
   ],
   "source": [
    "for hashtag in hashtags: \n",
    "    tweetfile = hashtag\n",
    "    file = []\n",
    "    with open(tweetfile,encoding=\"utf8\") as f:\n",
    "        for line in f:\n",
    "            file.append(line)\n",
    "    hours,num_follow,num_retweets = [],[],[]\n",
    "    num_tweets = 0\n",
    "    for line in file:\n",
    "        tw = json.loads(line)\n",
    "        hours.append(tw['citation_date'])\n",
    "        num_follow.append(tw['author']['followers'])\n",
    "        num_retweets.append(tw['metrics']['citations']['total'])\n",
    "        num_tweets += 1\n",
    "    print(\"Statistics for \",tweetfile)\n",
    "    print(\"Average number of tweets per hour: \", num_tweets/((max(hours)-min(hours))/3600.))\n",
    "    print(\"Average number of followers of users posting the tweets per tweet: \", sum(num_follow)/float(num_tweets) )\n",
    "    print(\"Average number of retweets per tweet: \", sum(num_retweets)/float(num_tweets))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x2524eeb23c8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x25218878908>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "hashtags = 'tweets_#nfl.txt', 'tweets_#superbowl.txt'\n",
    "for hashtag in hashtags: \n",
    "    tweetfile = hashtag\n",
    "    file = []\n",
    "    with open(tweetfile,encoding=\"utf8\") as f:\n",
    "        for line in f:\n",
    "            file.append(line)\n",
    "    hours,num_follow,num_retweets = [],[],[]\n",
    "    num_tweets = 0\n",
    "    for line in file:\n",
    "        tw = json.loads(line)\n",
    "        hours.append(tw['citation_date'])\n",
    "        \n",
    "    tweets_hr = [0] * int((max(hours)-min(hours))/3600+1)\n",
    "    start = min(hours)\n",
    "    for i in hours:\n",
    "        tweets_hr[int((i-start)/3600)] += 1\n",
    "    x = [i for i in range(0,len(tweets_hr))]\n",
    "    plt.bar(x,tweets_hr,1)\n",
    "    plt.xlabel(\"Hour\"); plt.ylabel(\"Number of tweets\"); plt.title(tweetfile)\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE for tweets_#gohawks.txt : 770383.049641\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.476\n",
      "Model:                            OLS   Adj. R-squared:                  0.471\n",
      "Method:                 Least Squares   F-statistic:                     102.3\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):           1.10e-76\n",
      "Time:                        22:52:01   Log-Likelihood:                -4663.7\n",
      "No. Observations:                 569   AIC:                             9339.\n",
      "Df Residuals:                     563   BIC:                             9365.\n",
      "Df Model:                           5                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         99.5479     72.676      1.370      0.171     -43.202     242.298\n",
      "x1             1.3860      5.451      0.254      0.799      -9.321      12.093\n",
      "x2             1.2823      0.165      7.767      0.000       0.958       1.607\n",
      "x3            -0.0002   8.06e-05     -2.407      0.016      -0.000   -3.57e-05\n",
      "x4            -0.1364      0.044     -3.113      0.002      -0.222      -0.050\n",
      "x5          6.044e-05      0.000      0.402      0.687      -0.000       0.000\n",
      "==============================================================================\n",
      "Omnibus:                      899.587   Durbin-Watson:                   2.216\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           747082.685\n",
      "Skew:                           8.625   Prob(JB):                         0.00\n",
      "Kurtosis:                     179.674   Cond. No.                     5.24e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 5.24e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#gopatriots.txt : 35966.267734\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.627\n",
      "Model:                            OLS   Adj. R-squared:                  0.623\n",
      "Method:                 Least Squares   F-statistic:                     145.9\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):           1.37e-90\n",
      "Time:                        22:52:04   Log-Likelihood:                -2932.2\n",
      "No. Observations:                 440   AIC:                             5876.\n",
      "Df Residuals:                     434   BIC:                             5901.\n",
      "Df Model:                           5                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         13.2200     18.907      0.699      0.485     -23.941      50.381\n",
      "x1            -0.3349      1.413     -0.237      0.813      -3.112       2.442\n",
      "x2             0.3055      0.326      0.938      0.349      -0.334       0.945\n",
      "x3            -0.0001      0.000     -0.421      0.674      -0.001       0.000\n",
      "x4             0.4868      0.219      2.219      0.027       0.056       0.918\n",
      "x5         -2.911e-05      0.000     -0.116      0.908      -0.001       0.000\n",
      "==============================================================================\n",
      "Omnibus:                      346.644   Durbin-Watson:                   1.909\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           128866.477\n",
      "Skew:                           2.205   Prob(JB):                         0.00\n",
      "Kurtosis:                      86.724   Cond. No.                     9.12e+05\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 9.12e+05. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#nfl.txt : 271706.966088\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.570\n",
      "Model:                            OLS   Adj. R-squared:                  0.567\n",
      "Method:                 Least Squares   F-statistic:                     152.9\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):          3.58e-103\n",
      "Time:                        22:52:23   Log-Likelihood:                -4467.0\n",
      "No. Observations:                 582   AIC:                             8946.\n",
      "Df Residuals:                     576   BIC:                             8972.\n",
      "Df Model:                           5                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const        126.4288     43.356      2.916      0.004      41.273     211.585\n",
      "x1             0.2952      3.176      0.093      0.926      -5.942       6.533\n",
      "x2             0.5651      0.135      4.173      0.000       0.299       0.831\n",
      "x3             0.0001   2.51e-05      4.573      0.000    6.54e-05       0.000\n",
      "x4            -0.1650      0.064     -2.578      0.010      -0.291      -0.039\n",
      "x5            -0.0001   3.32e-05     -3.527      0.000      -0.000    -5.2e-05\n",
      "==============================================================================\n",
      "Omnibus:                      665.434   Durbin-Watson:                   2.373\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           343912.180\n",
      "Skew:                           4.594   Prob(JB):                         0.00\n",
      "Kurtosis:                     121.733   Cond. No.                     8.66e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 8.66e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#patriots.txt : 5180890.103265\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.668\n",
      "Model:                            OLS   Adj. R-squared:                  0.666\n",
      "Method:                 Least Squares   F-statistic:                     233.8\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):          1.91e-136\n",
      "Time:                        22:52:57   Log-Likelihood:                -5361.4\n",
      "No. Observations:                 586   AIC:                         1.073e+04\n",
      "Df Residuals:                     580   BIC:                         1.076e+04\n",
      "Df Model:                           5                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const        180.1751    183.925      0.980      0.328    -181.066     541.416\n",
      "x1            -5.8597     13.765     -0.426      0.670     -32.896      21.176\n",
      "x2             0.9145      0.071     12.937      0.000       0.776       1.053\n",
      "x3         -1.098e-05   2.63e-05     -0.417      0.677   -6.27e-05    4.07e-05\n",
      "x4            -0.0681      0.058     -1.178      0.239      -0.181       0.045\n",
      "x5             0.0001   9.17e-05      1.340      0.181   -5.72e-05       0.000\n",
      "==============================================================================\n",
      "Omnibus:                      887.682   Durbin-Watson:                   1.998\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           690539.222\n",
      "Skew:                           7.937   Prob(JB):                         0.00\n",
      "Kurtosis:                     170.420   Cond. No.                     1.60e+07\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.6e+07. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE for tweets_#sb49.txt : 17575938.955826\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.804\n",
      "Model:                            OLS   Adj. R-squared:                  0.802\n",
      "Method:                 Least Squares   F-statistic:                     435.6\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):          4.54e-185\n",
      "Time:                        22:53:57   Log-Likelihood:                -5231.3\n",
      "No. Observations:                 536   AIC:                         1.047e+04\n",
      "Df Residuals:                     530   BIC:                         1.050e+04\n",
      "Df Model:                           5                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const        235.2366    365.931      0.643      0.521    -483.616     954.089\n",
      "x1           -17.9341     26.914     -0.666      0.505     -70.805      34.937\n",
      "x2             1.1361      0.091     12.485      0.000       0.957       1.315\n",
      "x3          9.695e-06    1.3e-05      0.743      0.458   -1.59e-05    3.53e-05\n",
      "x4            -0.1602      0.082     -1.953      0.051      -0.321       0.001\n",
      "x5          9.417e-05   4.58e-05      2.055      0.040    4.16e-06       0.000\n",
      "==============================================================================\n",
      "Omnibus:                     1070.760   Durbin-Watson:                   1.674\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):          1720660.261\n",
      "Skew:                          13.993   Prob(JB):                         0.00\n",
      "Kurtosis:                     279.154   Cond. No.                     1.67e+08\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.67e+08. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#superbowl.txt : 52483472.229179\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.800\n",
      "Model:                            OLS   Adj. R-squared:                  0.798\n",
      "Method:                 Least Squares   F-statistic:                     463.5\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):          6.72e-200\n",
      "Time:                        22:55:35   Log-Likelihood:                -6039.9\n",
      "No. Observations:                 586   AIC:                         1.209e+04\n",
      "Df Residuals:                     580   BIC:                         1.212e+04\n",
      "Df Model:                           5                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const       -149.5572    605.382     -0.247      0.805   -1338.565    1039.451\n",
      "x1           -20.4965     43.624     -0.470      0.639    -106.177      65.184\n",
      "x2             2.2766      0.080     28.537      0.000       2.120       2.433\n",
      "x3            -0.0001    2.2e-05     -6.265      0.000      -0.000   -9.47e-05\n",
      "x4            -0.2543      0.046     -5.544      0.000      -0.344      -0.164\n",
      "x5             0.0007      0.000      4.889      0.000       0.000       0.001\n",
      "==============================================================================\n",
      "Omnibus:                      973.862   Durbin-Watson:                   2.283\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):          1787388.254\n",
      "Skew:                           9.272   Prob(JB):                         0.00\n",
      "Kurtosis:                     272.925   Cond. No.                     2.21e+08\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 2.21e+08. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "hashtags = 'tweets_#gohawks.txt', 'tweets_#gopatriots.txt', 'tweets_#nfl.txt', 'tweets_#patriots.txt', 'tweets_#sb49.txt', 'tweets_#superbowl.txt'\n",
    "\n",
    "for hashtag in hashtags:\n",
    "    tweetfile = hashtag\n",
    "    file = []\n",
    "    with open(tweetfile,encoding=\"utf8\") as f:\n",
    "        for line in f:\n",
    "            file.append(line)\n",
    "    date,time,num_tweets,hours,num_follow,num_retweets = [],[],[],[],[],[]\n",
    "    for n,line in enumerate(file):\n",
    "        tw = json.loads(line)\n",
    "        num_tweets.append(1)\n",
    "        hours.append(tw['citation_date'])\n",
    "        num_follow.append(tw['author']['followers'])\n",
    "        num_retweets.append(tw['metrics']['citations']['total'])\n",
    "    df = pd.DataFrame({'tweets':num_tweets,'hours':hours,'followers':num_follow,'retweets':num_retweets},columns=['tweets', 'hours', 'followers', 'retweets'])\n",
    "    pst_tz = pytz.timezone('America/Los_Angeles')\n",
    "    for hour in df['hours']:\n",
    "        timestamp = str(datetime.datetime.fromtimestamp(int(hour), pst_tz))\n",
    "        time_split = ''.join(timestamp[0:10].split('-'))\n",
    "        date.append(int(time_split))\n",
    "        time.append(int(timestamp[11:13]))\n",
    "    df.insert(1,'date',date)\n",
    "    df.insert(2,'time',time)\n",
    "    df.insert(3,'max_followers',df['followers'])\n",
    "    df.drop('hours', 1, inplace = True)\n",
    "    df1 = df.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum, 'followers' : np.sum, 'retweets' : np.sum, 'max_followers' : np.max})\n",
    "    X = []\n",
    "    for i in df1.index:\n",
    "        X.append(df1.loc[i, 'time':'max_followers'].values)\n",
    "    X.pop()\n",
    "    X = sm.add_constant(X)\n",
    "    y = df1.loc[df1.index[1]:, 'tweets'].values\n",
    "    model = sm.OLS(y,X).fit()\n",
    "    pred_y = model.predict(X)\n",
    "    print(\"MSE for %s : %.6f\" % (tweetfile, mean_squared_error(y,pred_y)))\n",
    "    print(model.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE for tweets_#gohawks.txt : 570180.148289\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.612\n",
      "Model:                            OLS   Adj. R-squared:                  0.608\n",
      "Method:                 Least Squares   F-statistic:                     147.9\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):          3.64e-112\n",
      "Time:                        22:59:26   Log-Likelihood:                -4578.1\n",
      "No. Observations:                 569   AIC:                             9170.\n",
      "Df Residuals:                     562   BIC:                             9201.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const        -37.4039     37.403     -1.000      0.318    -110.871      36.063\n",
      "x1           -37.8126      4.251     -8.896      0.000     -46.162     -29.464\n",
      "x2            -0.0003    4.8e-05     -6.527      0.000      -0.000      -0.000\n",
      "x3             0.0139      0.040      0.343      0.732      -0.066       0.093\n",
      "x4             2.6383      0.466      5.662      0.000       1.723       3.553\n",
      "x5             7.2540      0.862      8.413      0.000       5.560       8.948\n",
      "x6             2.3040      0.209     11.024      0.000       1.894       2.715\n",
      "==============================================================================\n",
      "Omnibus:                      996.501   Durbin-Watson:                   2.156\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           938702.833\n",
      "Skew:                          10.722   Prob(JB):                         0.00\n",
      "Kurtosis:                     200.823   Cond. No.                     3.10e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 3.1e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#gopatriots.txt : 16213.514911\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.832\n",
      "Model:                            OLS   Adj. R-squared:                  0.830\n",
      "Method:                 Least Squares   F-statistic:                     357.1\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):          3.73e-164\n",
      "Time:                        22:59:28   Log-Likelihood:                -2756.9\n",
      "No. Observations:                 440   AIC:                             5528.\n",
      "Df Residuals:                     433   BIC:                             5556.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         -9.8537      6.560     -1.502      0.134     -22.746       3.039\n",
      "x1           -29.6223      1.979    -14.966      0.000     -33.513     -25.732\n",
      "x2         -2.476e-05   4.09e-05     -0.606      0.545      -0.000    5.55e-05\n",
      "x3            -1.0492      0.160     -6.547      0.000      -1.364      -0.734\n",
      "x4             5.6152      0.506     11.094      0.000       4.620       6.610\n",
      "x5             5.0962      0.345     14.779      0.000       4.418       5.774\n",
      "x6             2.8608      0.371      7.715      0.000       2.132       3.590\n",
      "==============================================================================\n",
      "Omnibus:                      211.062   Durbin-Watson:                   1.748\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            69665.354\n",
      "Skew:                           0.700   Prob(JB):                         0.00\n",
      "Kurtosis:                      64.628   Cond. No.                     4.48e+05\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 4.48e+05. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#nfl.txt : 236010.886640\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.627\n",
      "Model:                            OLS   Adj. R-squared:                  0.623\n",
      "Method:                 Least Squares   F-statistic:                     160.9\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):          1.46e-119\n",
      "Time:                        22:59:50   Log-Likelihood:                -4426.0\n",
      "No. Observations:                 582   AIC:                             8866.\n",
      "Df Residuals:                     575   BIC:                             8897.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const        109.0587     24.223      4.502      0.000      61.482     156.636\n",
      "x1            -0.5936      1.672     -0.355      0.723      -3.878       2.691\n",
      "x2          2.345e-05   1.35e-05      1.740      0.082   -3.03e-06    4.99e-05\n",
      "x3            -0.2541      0.063     -4.058      0.000      -0.377      -0.131\n",
      "x4             2.5907      0.634      4.089      0.000       1.346       3.835\n",
      "x5            -0.2410      0.356     -0.678      0.498      -0.939       0.457\n",
      "x6             0.6868      0.088      7.848      0.000       0.515       0.859\n",
      "==============================================================================\n",
      "Omnibus:                      550.623   Durbin-Watson:                   2.454\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           163575.562\n",
      "Skew:                           3.359   Prob(JB):                         0.00\n",
      "Kurtosis:                      84.855   Cond. No.                     5.06e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 5.06e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#patriots.txt : 2999486.220984\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.808\n",
      "Model:                            OLS   Adj. R-squared:                  0.806\n",
      "Method:                 Least Squares   F-statistic:                     406.2\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):          8.63e-204\n",
      "Time:                        23:00:27   Log-Likelihood:                -5201.3\n",
      "No. Observations:                 586   AIC:                         1.042e+04\n",
      "Df Residuals:                     579   BIC:                         1.045e+04\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const       -383.6166     82.159     -4.669      0.000    -544.982    -222.252\n",
      "x1           -64.3213      4.230    -15.207      0.000     -72.628     -56.014\n",
      "x2          9.163e-06   3.35e-05      0.273      0.785   -5.67e-05     7.5e-05\n",
      "x3            -0.2537      0.045     -5.578      0.000      -0.343      -0.164\n",
      "x4             4.4775      0.259     17.264      0.000       3.968       4.987\n",
      "x5            12.3421      0.816     15.130      0.000      10.740      13.944\n",
      "x6             3.0921      0.257     12.028      0.000       2.587       3.597\n",
      "==============================================================================\n",
      "Omnibus:                     1052.008   Durbin-Watson:                   1.759\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):          1101727.269\n",
      "Skew:                          11.329   Prob(JB):                         0.00\n",
      "Kurtosis:                     214.207   Cond. No.                     9.32e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 9.32e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE for tweets_#sb49.txt : 14245261.882196\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.841\n",
      "Model:                            OLS   Adj. R-squared:                  0.840\n",
      "Method:                 Least Squares   F-statistic:                     467.6\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):          7.99e-208\n",
      "Time:                        23:01:29   Log-Likelihood:                -5175.0\n",
      "No. Observations:                 536   AIC:                         1.036e+04\n",
      "Df Residuals:                     529   BIC:                         1.039e+04\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const       -408.6499    178.329     -2.292      0.022    -758.970     -58.330\n",
      "x1           -57.4847      6.996     -8.217      0.000     -71.228     -43.742\n",
      "x2          6.854e-05   1.28e-05      5.363      0.000    4.34e-05    9.37e-05\n",
      "x3             0.2552      0.093      2.750      0.006       0.073       0.438\n",
      "x4             4.4742      0.456      9.817      0.000       3.579       5.370\n",
      "x5            11.0396      1.364      8.096      0.000       8.361      13.718\n",
      "x6             1.9713      0.328      6.016      0.000       1.328       2.615\n",
      "==============================================================================\n",
      "Omnibus:                     1049.988   Durbin-Watson:                   2.030\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):          1402987.592\n",
      "Skew:                          13.476   Prob(JB):                         0.00\n",
      "Kurtosis:                     252.187   Cond. No.                     9.02e+07\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 9.02e+07. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#superbowl.txt : 31319811.085434\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.881\n",
      "Model:                            OLS   Adj. R-squared:                  0.879\n",
      "Method:                 Least Squares   F-statistic:                     711.4\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):          2.28e-263\n",
      "Time:                        23:03:11   Log-Likelihood:                -5888.6\n",
      "No. Observations:                 586   AIC:                         1.179e+04\n",
      "Df Residuals:                     579   BIC:                         1.182e+04\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const       -778.3018    265.501     -2.931      0.004   -1299.763    -256.840\n",
      "x1           -41.4939      6.334     -6.551      0.000     -53.934     -29.054\n",
      "x2         -8.917e-05   1.28e-05     -6.947      0.000      -0.000    -6.4e-05\n",
      "x3            -0.5066      0.052     -9.788      0.000      -0.608      -0.405\n",
      "x4             3.3305      1.559      2.136      0.033       0.269       6.392\n",
      "x5             8.2239      1.305      6.304      0.000       5.661      10.786\n",
      "x6             2.9086      0.416      6.994      0.000       2.092       3.725\n",
      "==============================================================================\n",
      "Omnibus:                     1117.222   Durbin-Watson:                   1.924\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):          1716172.789\n",
      "Skew:                          12.766   Prob(JB):                         0.00\n",
      "Kurtosis:                     266.885   Cond. No.                     1.25e+08\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.25e+08. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "hashtags = 'tweets_#gohawks.txt', 'tweets_#gopatriots.txt', 'tweets_#nfl.txt', 'tweets_#patriots.txt', 'tweets_#sb49.txt', 'tweets_#superbowl.txt'\n",
    "\n",
    "for hashtag in hashtags:\n",
    "    tweetfile = hashtag\n",
    "    file = []\n",
    "    with open(tweetfile,encoding=\"utf8\") as f:\n",
    "        for line in f:\n",
    "            file.append(line)\n",
    "    pst_tz = pytz.timezone('America/Los_Angeles')\n",
    "    date,time,num_tweets,num_follow,num_retweets,num_mentions,rank_score,num_hashtags = [],[],[],[],[],[],[],[]\n",
    "    for n,line in enumerate(file):\n",
    "        tw = json.loads(line)\n",
    "        timestamp = tw['citation_date']\n",
    "        timestamp = str(datetime.datetime.fromtimestamp(int(timestamp), pst_tz))\n",
    "        time_split = ''.join(timestamp[0:10].split('-'))\n",
    "        date.append(int(time_split))\n",
    "        time.append(int(timestamp[11:13]))\n",
    "\n",
    "        num_tweets.append(1)\n",
    "        num_follow.append(tw['author']['followers'])\n",
    "        num_retweets.append(tw['metrics']['citations']['total'])\n",
    "        num_mentions.append(len(tw['tweet']['entities']['user_mentions']))\n",
    "        rank_score.append(tw['metrics']['ranking_score'])\n",
    "        num_hashtags.append(tw['title'].count('#'))\n",
    "    df = pd.DataFrame({'date':date,'time':time,'tweets':num_tweets,'followers':num_follow,'retweets':num_retweets,'mentions':num_mentions,'score':rank_score,'hashtags':num_hashtags},\n",
    "                      columns=['date','time','tweets', 'followers', 'retweets','mentions','score','hashtags'])\n",
    "    df1 = df.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum,  'followers' : np.sum, 'retweets' : np.sum, 'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "    X = []\n",
    "    for i in df1.index:\n",
    "        X.append(df1.loc[i, 'tweets':'hashtags'].values)\n",
    "    X.pop()\n",
    "    X = sm.add_constant(X)\n",
    "    y = df1.loc[df1.index[1]:, 'tweets'].values\n",
    "    model = sm.OLS(y,X).fit()\n",
    "    pred_y = model.predict(X)\n",
    "    print(\"MSE for %s : %.6f\" % (tweetfile, mean_squared_error(y,pred_y)))\n",
    "    print(model.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x189375cec50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x189375cecc0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x18959de2da0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x18959de2ba8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x18959fed550>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1891ca27668>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1891b494e80>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x18959fed518>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1893762b978>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x18936b6ed68>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1891c13b5f8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x18993f3c630>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1899498ce80>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1899491aef0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x18994998860>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1891c30ab00>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x18936b6e550>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x189949b2a20>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "hashtags = 'tweets_#gohawks.txt', 'tweets_#gopatriots.txt', 'tweets_#nfl.txt', 'tweets_#patriots.txt', 'tweets_#sb49.txt', 'tweets_#superbowl.txt'\n",
    "\n",
    "for hashtag in hashtags:\n",
    "    tweetfile = hashtag\n",
    "    file = []\n",
    "    with open(tweetfile,encoding=\"utf8\") as f:\n",
    "        for line in f:\n",
    "            file.append(line)\n",
    "    pst_tz = pytz.timezone('America/Los_Angeles')\n",
    "    date,time,num_tweets,num_follow,num_retweets,num_mentions,rank_score,num_hashtags = [],[],[],[],[],[],[],[]\n",
    "    for n,line in enumerate(file):\n",
    "        tw = json.loads(line)\n",
    "        timestamp = tw['citation_date']\n",
    "        timestamp = str(datetime.datetime.fromtimestamp(int(timestamp), pst_tz))\n",
    "        time_split = ''.join(timestamp[0:10].split('-'))\n",
    "        date.append(int(time_split))\n",
    "        time.append(int(timestamp[11:13]))\n",
    "\n",
    "        num_tweets.append(1)\n",
    "        num_follow.append(tw['author']['followers'])\n",
    "        num_retweets.append(tw['metrics']['citations']['total'])\n",
    "        num_mentions.append(len(tw['tweet']['entities']['user_mentions']))\n",
    "        rank_score.append(tw['metrics']['ranking_score'])\n",
    "        num_hashtags.append(tw['title'].count('#'))\n",
    "    df = pd.DataFrame({'date':date,'time':time,'tweets':num_tweets,'followers':num_follow,'retweets':num_retweets,'mentions':num_mentions,'score':rank_score,'hashtags':num_hashtags},\n",
    "                      columns=['date','time','tweets', 'followers', 'retweets','mentions','score','hashtags'])\n",
    "    df1 = df.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum,  'followers' : np.sum, 'retweets' : np.sum, 'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "    feat = 'retweets'\n",
    "    X = df1[feat].values\n",
    "    X = sm.add_constant(X)\n",
    "    y = df1['tweets'].values\n",
    "    model = sm.OLS(y,X).fit()\n",
    "    pred_y = model.predict(X)\n",
    "    plt.figure()\n",
    "    plt.plot(y,pred_y,'bo')\n",
    "    plt.xlabel(feat); plt.ylabel(\"Tweets\"); plt.title(tweetfile)\n",
    "    plt.show()\n",
    "    feat = 'score'\n",
    "    X = df1[feat].values\n",
    "    X = sm.add_constant(X)\n",
    "    y = df1['tweets'].values\n",
    "    model = sm.OLS(y,X).fit()\n",
    "    pred_y = model.predict(X)\n",
    "    plt.figure()\n",
    "    plt.plot(y,pred_y,'bo')\n",
    "    plt.xlabel(feat); plt.ylabel(\"Tweets\"); plt.title(tweetfile)\n",
    "    plt.show()\n",
    "    feat = 'hashtags'\n",
    "    X = df1[feat].values\n",
    "    X = sm.add_constant(X)\n",
    "    y = df1['tweets'].values\n",
    "    model = sm.OLS(y,X).fit()\n",
    "    pred_y = model.predict(X)\n",
    "    plt.figure()\n",
    "    plt.plot(y,pred_y,'bo')\n",
    "    plt.xlabel(feat); plt.ylabel(\"Tweets\"); plt.title(tweetfile)\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE for tweets_#gohawks.txt for before Feb 1: 432938.036776\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.580\n",
      "Model:                            OLS   Adj. R-squared:                  0.574\n",
      "Method:                 Least Squares   F-statistic:                     99.45\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):           3.27e-78\n",
      "Time:                        23:11:21   Log-Likelihood:                -3471.7\n",
      "No. Observations:                 439   AIC:                             6957.\n",
      "Df Residuals:                     432   BIC:                             6986.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const        -37.1191     40.994     -0.905      0.366    -117.691      43.453\n",
      "x1           -73.7491      4.684    -15.744      0.000     -82.956     -64.543\n",
      "x2            -0.0003   6.46e-05     -5.030      0.000      -0.000      -0.000\n",
      "x3            -0.2095      0.090     -2.325      0.021      -0.387      -0.032\n",
      "x4             8.9520      0.621     14.416      0.000       7.731      10.172\n",
      "x5            15.8291      0.978     16.192      0.000      13.908      17.750\n",
      "x6            -0.6824      0.351     -1.946      0.052      -1.372       0.007\n",
      "==============================================================================\n",
      "Omnibus:                      673.707   Durbin-Watson:                   2.121\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           265112.577\n",
      "Skew:                           8.089   Prob(JB):                         0.00\n",
      "Kurtosis:                     122.298   Cond. No.                     2.77e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 2.77e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#gohawks.txt  for between Feb 1: 74394.816503\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.475\n",
      "Model:                            OLS   Adj. R-squared:                  0.452\n",
      "Method:                 Least Squares   F-statistic:                     20.69\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):           3.68e-17\n",
      "Time:                        23:11:21   Log-Likelihood:                -1012.0\n",
      "No. Observations:                 144   AIC:                             2038.\n",
      "Df Residuals:                     137   BIC:                             2059.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const        105.2496     45.795      2.298      0.023      14.694     195.805\n",
      "x1            -1.5284      4.361     -0.350      0.727     -10.152       7.095\n",
      "x2          -4.84e-05   3.49e-05     -1.385      0.168      -0.000    2.07e-05\n",
      "x3            -0.0056      0.169     -0.033      0.974      -0.340       0.329\n",
      "x4            -0.3633      0.829     -0.438      0.662      -2.002       1.275\n",
      "x5             0.2734      0.903      0.303      0.763      -1.513       2.059\n",
      "x6             0.5792      0.350      1.654      0.100      -0.113       1.272\n",
      "==============================================================================\n",
      "Omnibus:                      106.481   Durbin-Watson:                   1.936\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              928.149\n",
      "Skew:                           2.597   Prob(JB):                    2.85e-202\n",
      "Kurtosis:                      14.301   Cond. No.                     2.74e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 2.74e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#gohawks.txt  for after Feb 1: 1985.011394\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.791\n",
      "Model:                            OLS   Adj. R-squared:                  0.780\n",
      "Method:                 Least Squares   F-statistic:                     68.86\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):           8.22e-35\n",
      "Time:                        23:11:21   Log-Likelihood:                -605.01\n",
      "No. Observations:                 116   AIC:                             1224.\n",
      "Df Residuals:                     109   BIC:                             1243.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         12.0431      5.168      2.330      0.022       1.799      22.287\n",
      "x1            -2.8344      3.921     -0.723      0.471     -10.606       4.937\n",
      "x2          -9.66e-05   8.37e-05     -1.154      0.251      -0.000    6.93e-05\n",
      "x3             0.0103      0.013      0.799      0.426      -0.015       0.036\n",
      "x4             1.4577      0.722      2.018      0.046       0.026       2.889\n",
      "x5             0.7837      0.863      0.908      0.366      -0.926       2.493\n",
      "x6            -0.3986      0.253     -1.576      0.118      -0.900       0.103\n",
      "==============================================================================\n",
      "Omnibus:                       49.115   Durbin-Watson:                   1.766\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             1407.806\n",
      "Skew:                           0.557   Prob(JB):                    1.99e-306\n",
      "Kurtosis:                      20.030   Cond. No.                     3.31e+05\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 3.31e+05. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#gopatriots.txt for before Feb 1: 1658.209272\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.644\n",
      "Model:                            OLS   Adj. R-squared:                  0.638\n",
      "Method:                 Least Squares   F-statistic:                     113.4\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):           3.37e-81\n",
      "Time:                        23:11:23   Log-Likelihood:                -1963.1\n",
      "No. Observations:                 383   AIC:                             3940.\n",
      "Df Residuals:                     376   BIC:                             3968.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          0.3445      2.545      0.135      0.892      -4.660       5.349\n",
      "x1           -13.2606      2.850     -4.653      0.000     -18.865      -7.656\n",
      "x2          1.868e-05   1.71e-05      1.094      0.275   -1.49e-05    5.22e-05\n",
      "x3            -0.6543      0.117     -5.608      0.000      -0.884      -0.425\n",
      "x4             4.5865      0.443     10.351      0.000       3.715       5.458\n",
      "x5             3.0316      0.558      5.430      0.000       1.934       4.129\n",
      "x6            -0.6347      0.203     -3.123      0.002      -1.034      -0.235\n",
      "==============================================================================\n",
      "Omnibus:                      596.137   Durbin-Watson:                   1.758\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           210935.213\n",
      "Skew:                           8.155   Prob(JB):                         0.00\n",
      "Kurtosis:                     116.806   Cond. No.                     2.96e+05\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 2.96e+05. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#gopatriots.txt  for between Feb 1: 15051.410049\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.421\n",
      "Model:                            OLS   Adj. R-squared:                  0.395\n",
      "Method:                 Least Squares   F-statistic:                     16.01\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):           8.91e-14\n",
      "Time:                        23:11:23   Log-Likelihood:                -865.77\n",
      "No. Observations:                 139   AIC:                             1746.\n",
      "Df Residuals:                     132   BIC:                             1766.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         47.6571     17.443      2.732      0.007      13.153      82.161\n",
      "x1             3.2842      3.382      0.971      0.333      -3.406       9.975\n",
      "x2         -5.019e-05   7.32e-05     -0.686      0.494      -0.000    9.46e-05\n",
      "x3             0.7890      0.298      2.645      0.009       0.199       1.379\n",
      "x4            -0.5747      1.181     -0.487      0.627      -2.911       1.762\n",
      "x5            -0.6505      0.682     -0.954      0.342      -1.999       0.698\n",
      "x6            -0.1737      0.418     -0.415      0.679      -1.001       0.653\n",
      "==============================================================================\n",
      "Omnibus:                      144.955   Durbin-Watson:                   2.126\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             2285.180\n",
      "Skew:                           3.897   Prob(JB):                         0.00\n",
      "Kurtosis:                      21.270   Cond. No.                     4.50e+05\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 4.5e+05. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#gopatriots.txt  for after Feb 1: 18.666098\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.942\n",
      "Model:                            OLS   Adj. R-squared:                  0.932\n",
      "Method:                 Least Squares   F-statistic:                     97.10\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):           9.95e-21\n",
      "Time:                        23:11:23   Log-Likelihood:                -123.94\n",
      "No. Observations:                  43   AIC:                             261.9\n",
      "Df Residuals:                      36   BIC:                             274.2\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         -0.1047      0.965     -0.108      0.914      -2.062       1.852\n",
      "x1            -0.6880      0.752     -0.915      0.366      -2.213       0.838\n",
      "x2            -0.0003   8.48e-05     -4.029      0.000      -0.001      -0.000\n",
      "x3            -0.0521      0.017     -3.149      0.003      -0.086      -0.019\n",
      "x4             0.7569      0.273      2.768      0.009       0.202       1.311\n",
      "x5             0.3394      0.155      2.195      0.035       0.026       0.653\n",
      "x6             0.0545      0.097      0.563      0.577      -0.142       0.251\n",
      "==============================================================================\n",
      "Omnibus:                       27.275   Durbin-Watson:                   1.989\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              116.314\n",
      "Skew:                          -1.249   Prob(JB):                     5.53e-26\n",
      "Kurtosis:                      10.660   Cond. No.                     2.88e+04\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 2.88e+04. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE for tweets_#nfl.txt for before Feb 1: 64245.242125\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.524\n",
      "Model:                            OLS   Adj. R-squared:                  0.517\n",
      "Method:                 Least Squares   F-statistic:                     79.29\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):           1.44e-66\n",
      "Time:                        23:11:43   Log-Likelihood:                -3052.9\n",
      "No. Observations:                 439   AIC:                             6120.\n",
      "Df Residuals:                     432   BIC:                             6148.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         73.6500     18.181      4.051      0.000      37.915     109.384\n",
      "x1             0.5323      1.268      0.420      0.675      -1.959       3.024\n",
      "x2          1.435e-05   8.25e-06      1.741      0.082   -1.85e-06    3.06e-05\n",
      "x3            -0.0127      0.046     -0.275      0.784      -0.103       0.078\n",
      "x4             2.1746      0.547      3.979      0.000       1.100       3.249\n",
      "x5            -0.0941      0.277     -0.339      0.734      -0.639       0.451\n",
      "x6             0.0295      0.092      0.321      0.748      -0.151       0.210\n",
      "==============================================================================\n",
      "Omnibus:                      748.446   Durbin-Watson:                   2.247\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           481591.650\n",
      "Skew:                           9.837   Prob(JB):                         0.00\n",
      "Kurtosis:                     164.063   Cond. No.                     3.89e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 3.89e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#nfl.txt  for between Feb 1: 19743.110746\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.829\n",
      "Model:                            OLS   Adj. R-squared:                  0.821\n",
      "Method:                 Least Squares   F-statistic:                     110.6\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):           5.24e-50\n",
      "Time:                        23:11:43   Log-Likelihood:                -916.45\n",
      "No. Observations:                 144   AIC:                             1847.\n",
      "Df Residuals:                     137   BIC:                             1868.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         34.6597     21.768      1.592      0.114      -8.384      77.704\n",
      "x1            -6.2106      2.574     -2.412      0.017     -11.301      -1.120\n",
      "x2         -2.977e-05    1.2e-05     -2.488      0.014   -5.34e-05   -6.11e-06\n",
      "x3            -0.0908      0.050     -1.818      0.071      -0.189       0.008\n",
      "x4             0.0907      0.551      0.165      0.870      -0.999       1.180\n",
      "x5             1.5210      0.497      3.063      0.003       0.539       2.503\n",
      "x6             0.1610      0.136      1.181      0.239      -0.108       0.431\n",
      "==============================================================================\n",
      "Omnibus:                       47.425   Durbin-Watson:                   1.970\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              351.460\n",
      "Skew:                           0.887   Prob(JB):                     4.80e-77\n",
      "Kurtosis:                      10.445   Cond. No.                     4.09e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 4.09e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#nfl.txt  for after Feb 1: 16535.587279\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.796\n",
      "Model:                            OLS   Adj. R-squared:                  0.786\n",
      "Method:                 Least Squares   F-statistic:                     79.42\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):           9.17e-40\n",
      "Time:                        23:11:43   Log-Likelihood:                -809.55\n",
      "No. Observations:                 129   AIC:                             1633.\n",
      "Df Residuals:                     122   BIC:                             1653.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         95.6680     31.372      3.049      0.003      33.564     157.772\n",
      "x1            -0.3694      0.909     -0.406      0.685      -2.169       1.430\n",
      "x2          3.697e-06   9.62e-06      0.384      0.701   -1.53e-05    2.27e-05\n",
      "x3             0.0142      0.056      0.251      0.802      -0.098       0.126\n",
      "x4             0.8061      0.509      1.584      0.116      -0.202       1.814\n",
      "x5             0.2779      0.199      1.399      0.164      -0.115       0.671\n",
      "x6            -0.0849      0.079     -1.077      0.284      -0.241       0.071\n",
      "==============================================================================\n",
      "Omnibus:                       37.567   Durbin-Watson:                   1.878\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              101.536\n",
      "Skew:                           1.098   Prob(JB):                     8.95e-23\n",
      "Kurtosis:                       6.751   Cond. No.                     7.58e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 7.58e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#patriots.txt for before Feb 1: 340528.124329\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.564\n",
      "Model:                            OLS   Adj. R-squared:                  0.558\n",
      "Method:                 Least Squares   F-statistic:                     93.19\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):           9.50e-75\n",
      "Time:                        23:12:21   Log-Likelihood:                -3419.0\n",
      "No. Observations:                 439   AIC:                             6852.\n",
      "Df Residuals:                     432   BIC:                             6881.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const        150.4237     42.969      3.501      0.001      65.968     234.879\n",
      "x1            -6.9219      3.008     -2.301      0.022     -12.834      -1.010\n",
      "x2          4.906e-05   1.58e-05      3.106      0.002     1.8e-05    8.01e-05\n",
      "x3            -0.0089      0.084     -0.106      0.916      -0.174       0.157\n",
      "x4             0.4025      0.781      0.516      0.606      -1.132       1.937\n",
      "x5             1.8192      0.588      3.091      0.002       0.663       2.976\n",
      "x6            -0.4724      0.208     -2.274      0.023      -0.881      -0.064\n",
      "==============================================================================\n",
      "Omnibus:                      662.013   Durbin-Watson:                   2.124\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           250223.558\n",
      "Skew:                           7.819   Prob(JB):                         0.00\n",
      "Kurtosis:                     118.910   Cond. No.                     6.22e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 6.22e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#patriots.txt  for between Feb 1: 693345.511804\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.702\n",
      "Model:                            OLS   Adj. R-squared:                  0.689\n",
      "Method:                 Least Squares   F-statistic:                     53.71\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):           1.26e-33\n",
      "Time:                        23:12:21   Log-Likelihood:                -1172.7\n",
      "No. Observations:                 144   AIC:                             2359.\n",
      "Df Residuals:                     137   BIC:                             2380.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const        418.5002    137.108      3.052      0.003     147.378     689.622\n",
      "x1             1.7609      5.349      0.329      0.743      -8.817      12.339\n",
      "x2          -3.22e-05      5e-05     -0.644      0.521      -0.000    6.67e-05\n",
      "x3            -0.0886      0.218     -0.406      0.685      -0.520       0.343\n",
      "x4            -0.0093      0.310     -0.030      0.976      -0.622       0.603\n",
      "x5            -0.0954      1.078     -0.088      0.930      -2.227       2.036\n",
      "x6            -0.1634      0.251     -0.651      0.516      -0.660       0.333\n",
      "==============================================================================\n",
      "Omnibus:                      117.789   Durbin-Watson:                   2.025\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             1098.486\n",
      "Skew:                           2.969   Prob(JB):                    2.93e-239\n",
      "Kurtosis:                      15.158   Cond. No.                     9.84e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 9.84e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#patriots.txt  for after Feb 1: 10462.959129\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.869\n",
      "Model:                            OLS   Adj. R-squared:                  0.862\n",
      "Method:                 Least Squares   F-statistic:                     138.9\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):           4.54e-53\n",
      "Time:                        23:12:21   Log-Likelihood:                -804.22\n",
      "No. Observations:                 133   AIC:                             1622.\n",
      "Df Residuals:                     126   BIC:                             1643.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         32.6336     12.705      2.569      0.011       7.490      57.777\n",
      "x1             2.4867      1.209      2.057      0.042       0.094       4.879\n",
      "x2          1.543e-05   6.89e-06      2.239      0.027    1.79e-06    2.91e-05\n",
      "x3            -0.0124      0.016     -0.778      0.438      -0.044       0.019\n",
      "x4             0.4551      0.375      1.214      0.227      -0.287       1.197\n",
      "x5            -0.0578      0.203     -0.284      0.777      -0.460       0.345\n",
      "x6            -0.5010      0.135     -3.701      0.000      -0.769      -0.233\n",
      "==============================================================================\n",
      "Omnibus:                       58.667   Durbin-Watson:                   2.142\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              909.287\n",
      "Skew:                           0.999   Prob(JB):                    3.55e-198\n",
      "Kurtosis:                      15.653   Cond. No.                     3.84e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 3.84e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE for tweets_#sb49.txt for before Feb 1: 6394.509228\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.888\n",
      "Model:                            OLS   Adj. R-squared:                  0.886\n",
      "Method:                 Least Squares   F-statistic:                     505.0\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):          3.48e-178\n",
      "Time:                        23:13:26   Log-Likelihood:                -2256.4\n",
      "No. Observations:                 389   AIC:                             4527.\n",
      "Df Residuals:                     382   BIC:                             4555.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          7.3088      4.886      1.496      0.136      -2.299      16.916\n",
      "x1            -0.5300      0.611     -0.867      0.387      -1.732       0.672\n",
      "x2         -2.765e-06   1.07e-06     -2.573      0.010   -4.88e-06   -6.52e-07\n",
      "x3             0.0236      0.005      4.755      0.000       0.014       0.033\n",
      "x4            -0.8532      0.112     -7.599      0.000      -1.074      -0.632\n",
      "x5             0.6625      0.129      5.148      0.000       0.409       0.916\n",
      "x6            -0.3255      0.081     -4.010      0.000      -0.485      -0.166\n",
      "==============================================================================\n",
      "Omnibus:                      218.091   Durbin-Watson:                   1.540\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             5625.942\n",
      "Skew:                           1.830   Prob(JB):                         0.00\n",
      "Kurtosis:                      21.268   Cond. No.                     1.16e+07\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.16e+07. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#sb49.txt  for between Feb 1: 1158540.297279\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.880\n",
      "Model:                            OLS   Adj. R-squared:                  0.875\n",
      "Method:                 Least Squares   F-statistic:                     167.7\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):           1.45e-60\n",
      "Time:                        23:13:26   Log-Likelihood:                -1209.6\n",
      "No. Observations:                 144   AIC:                             2433.\n",
      "Df Residuals:                     137   BIC:                             2454.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const        293.1564    190.809      1.536      0.127     -84.156     670.468\n",
      "x1           -11.0064      3.587     -3.068      0.003     -18.100      -3.913\n",
      "x2          9.855e-06   7.61e-06      1.296      0.197   -5.19e-06    2.49e-05\n",
      "x3            -0.0152      0.037     -0.405      0.686      -0.089       0.059\n",
      "x4             0.8497      0.222      3.828      0.000       0.411       1.289\n",
      "x5             2.3804      0.690      3.451      0.001       1.016       3.744\n",
      "x6             0.2730      0.242      1.127      0.262      -0.206       0.752\n",
      "==============================================================================\n",
      "Omnibus:                       44.511   Durbin-Watson:                   2.147\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              234.128\n",
      "Skew:                           0.940   Prob(JB):                     1.44e-51\n",
      "Kurtosis:                       8.957   Cond. No.                     1.00e+08\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large,  1e+08. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#sb49.txt  for after Feb 1: 21238.326626\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.937\n",
      "Model:                            OLS   Adj. R-squared:                  0.934\n",
      "Method:                 Least Squares   F-statistic:                     310.6\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):           5.84e-73\n",
      "Time:                        23:13:26   Log-Likelihood:                -851.30\n",
      "No. Observations:                 133   AIC:                             1717.\n",
      "Df Residuals:                     126   BIC:                             1737.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         16.1219     16.111      1.001      0.319     -15.761      48.005\n",
      "x1            -4.9449      1.787     -2.768      0.006      -8.481      -1.409\n",
      "x2         -3.004e-06   1.91e-06     -1.572      0.119   -6.79e-06    7.79e-07\n",
      "x3             0.0187      0.007      2.698      0.008       0.005       0.032\n",
      "x4            -0.9070      0.172     -5.279      0.000      -1.247      -0.567\n",
      "x5             1.5304      0.304      5.029      0.000       0.928       2.133\n",
      "x6            -0.0754      0.232     -0.325      0.746      -0.534       0.384\n",
      "==============================================================================\n",
      "Omnibus:                      101.706   Durbin-Watson:                   1.659\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             2549.785\n",
      "Skew:                           2.148   Prob(JB):                         0.00\n",
      "Kurtosis:                      24.015   Cond. No.                     2.03e+07\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 2.03e+07. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#superbowl.txt for before Feb 1: 484339.553989\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.439\n",
      "Model:                            OLS   Adj. R-squared:                  0.431\n",
      "Method:                 Least Squares   F-statistic:                     56.28\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):           3.06e-51\n",
      "Time:                        23:15:15   Log-Likelihood:                -3496.3\n",
      "No. Observations:                 439   AIC:                             7007.\n",
      "Df Residuals:                     432   BIC:                             7035.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         53.3942     40.256      1.326      0.185     -25.727     132.516\n",
      "x1             6.2633      2.255      2.778      0.006       1.832      10.695\n",
      "x2          1.312e-05   4.92e-06      2.667      0.008    3.45e-06    2.28e-05\n",
      "x3            -0.0867      0.074     -1.178      0.240      -0.231       0.058\n",
      "x4             2.1241      0.536      3.966      0.000       1.071       3.177\n",
      "x5            -1.3984      0.516     -2.710      0.007      -2.413      -0.384\n",
      "x6            -0.0434      0.131     -0.332      0.740      -0.300       0.213\n",
      "==============================================================================\n",
      "Omnibus:                      627.399   Durbin-Watson:                   1.949\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           121111.266\n",
      "Skew:                           7.343   Prob(JB):                         0.00\n",
      "Kurtosis:                      83.034   Cond. No.                     1.68e+07\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.68e+07. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#superbowl.txt  for between Feb 1: 5970452.746502\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.904\n",
      "Model:                            OLS   Adj. R-squared:                  0.900\n",
      "Method:                 Least Squares   F-statistic:                     215.4\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):           3.51e-67\n",
      "Time:                        23:15:15   Log-Likelihood:                -1327.7\n",
      "No. Observations:                 144   AIC:                             2669.\n",
      "Df Residuals:                     137   BIC:                             2690.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const       1028.4540    364.401      2.822      0.005     307.875    1749.033\n",
      "x1            -4.3682      3.064     -1.426      0.156     -10.427       1.690\n",
      "x2         -7.682e-06   1.16e-05     -0.663      0.508   -3.06e-05    1.52e-05\n",
      "x3            -0.0320      0.014     -2.275      0.024      -0.060      -0.004\n",
      "x4             0.7233      0.487      1.484      0.140      -0.240       1.687\n",
      "x5             1.3809      0.585      2.360      0.020       0.224       2.538\n",
      "x6            -0.6009      0.352     -1.705      0.090      -1.298       0.096\n",
      "==============================================================================\n",
      "Omnibus:                       46.490   Durbin-Watson:                   1.548\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              203.297\n",
      "Skew:                           1.068   Prob(JB):                     7.16e-45\n",
      "Kurtosis:                       8.415   Cond. No.                     1.19e+08\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.19e+08. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "MSE for tweets_#superbowl.txt  for after Feb 1: 79534.481644\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.888\n",
      "Model:                            OLS   Adj. R-squared:                  0.882\n",
      "Method:                 Least Squares   F-statistic:                     165.9\n",
      "Date:                Wed, 18 Mar 2020   Prob (F-statistic):           2.54e-57\n",
      "Time:                        23:15:15   Log-Likelihood:                -939.10\n",
      "No. Observations:                 133   AIC:                             1892.\n",
      "Df Residuals:                     126   BIC:                             1912.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         83.2578     39.994      2.082      0.039       4.110     162.406\n",
      "x1            -6.5396      1.607     -4.069      0.000      -9.720      -3.359\n",
      "x2          5.223e-06   5.16e-06      1.012      0.314   -4.99e-06    1.54e-05\n",
      "x3            -0.0083      0.014     -0.594      0.554      -0.036       0.019\n",
      "x4            -0.2182      0.308     -0.708      0.480      -0.828       0.392\n",
      "x5             1.5104      0.340      4.443      0.000       0.838       2.183\n",
      "x6             0.2440      0.099      2.452      0.016       0.047       0.441\n",
      "==============================================================================\n",
      "Omnibus:                      197.984   Durbin-Watson:                   2.135\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            17236.959\n",
      "Skew:                           5.782   Prob(JB):                         0.00\n",
      "Kurtosis:                      57.559   Cond. No.                     3.26e+07\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 3.26e+07. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "for hashtag in hashtags:\n",
    "    tweetfile = hashtag\n",
    "    file = []\n",
    "    with open(tweetfile,encoding=\"utf8\") as f:\n",
    "        for line in f:\n",
    "            file.append(line)\n",
    "    pst_tz = pytz.timezone('America/Los_Angeles')\n",
    "    date,time,num_tweets,num_follow,num_retweets,num_mentions,rank_score,num_hashtags = [],[],[],[],[],[],[],[]\n",
    "    time_5  =[]\n",
    "    for n,line in enumerate(file):\n",
    "        tw = json.loads(line)\n",
    "        timestamp = tw['citation_date']\n",
    "        timestamp = str(datetime.datetime.fromtimestamp(int(timestamp), pst_tz))\n",
    "        time_split = ''.join(timestamp[0:10].split('-'))\n",
    "        date.append(int(time_split))\n",
    "        time.append(int(timestamp[11:13]))\n",
    "\n",
    "        a,b,c,_ = timestamp.split(':')\n",
    "        rounded = str(int((int(b)/5))*5).zfill(2)\n",
    "        time_mins = timestamp[11:13] + rounded\n",
    "        time_5.append(int(time_mins))\n",
    "\n",
    "        num_tweets.append(1)\n",
    "        num_follow.append(tw['author']['followers'])\n",
    "        num_retweets.append(tw['metrics']['citations']['total'])\n",
    "        num_mentions.append(len(tw['tweet']['entities']['user_mentions']))\n",
    "        rank_score.append(tw['metrics']['ranking_score'])\n",
    "        num_hashtags.append(tw['title'].count('#'))\n",
    "    df = pd.DataFrame({'date':date,'time':time,'tweets':num_tweets,'followers':num_follow,'retweets':num_retweets,'mentions':num_mentions,'score':rank_score,'hashtags':num_hashtags},\n",
    "                      columns=['date','time','tweets', 'followers', 'retweets','mentions','score','hashtags'])\n",
    "    df1 = df.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum,  'followers' : np.sum, 'retweets' : np.sum, 'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "    df_5 = pd.DataFrame({'date':date,'time':time_5,'tweets':num_tweets,'followers':num_follow,'retweets':num_retweets,'mentions':num_mentions,'score':rank_score,'hashtags':num_hashtags},\n",
    "                      columns=['date','time','tweets', 'followers', 'retweets','mentions','score','hashtags'])\n",
    "    df_5 = df_5.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum,  'followers' : np.sum, 'retweets' : np.sum, 'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "    t1 = df1.query('date < 20150201 or (date == 20150201 and time < 8)')\n",
    "    t2 = df_5.query('date == 20150201 and (time >= 800 and time <= 2000)')\n",
    "    t3 = df1.query('date > 20150201 or (date == 20150201 and time > 20)')\n",
    "    X = []\n",
    "    for i in t1.index:\n",
    "        X.append(t1.loc[i, 'tweets':].values)\n",
    "    X.pop()\n",
    "    X = sm.add_constant(X)\n",
    "    y = t1.loc[t1.index[1]:, 'tweets'].values\n",
    "    model = sm.OLS(y,X).fit()\n",
    "    pred_y = model.predict(X)\n",
    "    print(\"MSE for %s for before Feb 1: %.6f\" % (tweetfile, mean_squared_error(y,pred_y)))\n",
    "    print(model.summary())\n",
    "    X = []\n",
    "    for i in t2.index:\n",
    "        X.append(t2.loc[i, 'tweets':].values)\n",
    "    X.pop()\n",
    "    X = sm.add_constant(X)\n",
    "    y = t2.loc[t2.index[1]:, 'tweets'].values\n",
    "    model = sm.OLS(y,X).fit()\n",
    "    pred_y = model.predict(X)\n",
    "    print(\"MSE for %s  for between Feb 1: %.6f\" % (tweetfile, mean_squared_error(y,pred_y)))\n",
    "    print(model.summary())\n",
    "    X = []\n",
    "    for i in t3.index:\n",
    "        X.append(t3.loc[i, 'tweets':].values)\n",
    "    X.pop()\n",
    "    X = sm.add_constant(X)\n",
    "    y = t3.loc[t3.index[1]:, 'tweets'].values\n",
    "    model = sm.OLS(y,X).fit()\n",
    "    pred_y = model.predict(X)\n",
    "    print(\"MSE for %s  for after Feb 1: %.6f\" % (tweetfile, mean_squared_error(y,pred_y)))\n",
    "    print(model.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "done loading\n",
      "MSE for tweets_#all.txt for before Feb 1: 4283767.798199\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.429\n",
      "Model:                            OLS   Adj. R-squared:                  0.421\n",
      "Method:                 Least Squares   F-statistic:                     54.03\n",
      "Date:                Thu, 19 Mar 2020   Prob (F-statistic):           1.33e-49\n",
      "Time:                        14:40:28   Log-Likelihood:                -3974.8\n",
      "No. Observations:                 439   AIC:                             7964.\n",
      "Df Residuals:                     432   BIC:                             7992.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const        451.8626    140.477      3.217      0.001     175.759     727.966\n",
      "x1            -6.1718      2.260     -2.731      0.007     -10.613      -1.731\n",
      "x2          4.378e-07   8.36e-06      0.052      0.958    -1.6e-05    1.69e-05\n",
      "x3            -0.0127      0.073     -0.173      0.863      -0.157       0.132\n",
      "x4             1.1148      0.630      1.770      0.077      -0.123       2.353\n",
      "x5             1.4660      0.484      3.027      0.003       0.514       2.418\n",
      "x6            -0.1148      0.207     -0.555      0.579      -0.521       0.292\n",
      "==============================================================================\n",
      "Omnibus:                      774.200   Durbin-Watson:                   2.133\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           498228.207\n",
      "Skew:                          10.598   Prob(JB):                         0.00\n",
      "Kurtosis:                     166.672   Cond. No.                     3.68e+07\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 3.68e+07. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "done\n",
      "MSE for tweets_#all.txt  for between Feb 1: 15752753.040437\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.862\n",
      "Model:                            OLS   Adj. R-squared:                  0.856\n",
      "Method:                 Least Squares   F-statistic:                     142.8\n",
      "Date:                Thu, 19 Mar 2020   Prob (F-statistic):           2.03e-56\n",
      "Time:                        14:49:21   Log-Likelihood:                -1397.5\n",
      "No. Observations:                 144   AIC:                             2809.\n",
      "Df Residuals:                     137   BIC:                             2830.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const       1823.9528    739.739      2.466      0.015     361.169    3286.736\n",
      "x1            -2.9567      4.340     -0.681      0.497     -11.538       5.625\n",
      "x2          1.237e-06   1.39e-05      0.089      0.929   -2.63e-05    2.88e-05\n",
      "x3            -0.0451      0.021     -2.167      0.032      -0.086      -0.004\n",
      "x4             0.3108      0.222      1.399      0.164      -0.128       0.750\n",
      "x5             1.0180      0.853      1.194      0.235      -0.668       2.704\n",
      "x6            -0.4024      0.271     -1.485      0.140      -0.938       0.133\n",
      "==============================================================================\n",
      "Omnibus:                       36.684   Durbin-Watson:                   2.015\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               93.669\n",
      "Skew:                           1.009   Prob(JB):                     4.57e-21\n",
      "Kurtosis:                       6.397   Cond. No.                     2.58e+08\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 2.58e+08. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "done\n",
      "MSE for tweets_#all.txt  for after Feb 1: 213698.486010\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.930\n",
      "Model:                            OLS   Adj. R-squared:                  0.927\n",
      "Method:                 Least Squares   F-statistic:                     280.7\n",
      "Date:                Thu, 19 Mar 2020   Prob (F-statistic):           2.20e-70\n",
      "Time:                        14:49:21   Log-Likelihood:                -1004.8\n",
      "No. Observations:                 133   AIC:                             2024.\n",
      "Df Residuals:                     126   BIC:                             2044.\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const        211.6464     80.406      2.632      0.010      52.525     370.768\n",
      "x1            -8.3027      1.423     -5.834      0.000     -11.119      -5.486\n",
      "x2          9.077e-06   4.31e-06      2.104      0.037     5.4e-07    1.76e-05\n",
      "x3             0.0349      0.011      3.188      0.002       0.013       0.057\n",
      "x4            -0.3079      0.278     -1.106      0.271      -0.859       0.243\n",
      "x5             1.9156      0.275      6.966      0.000       1.371       2.460\n",
      "x6             0.1858      0.131      1.416      0.159      -0.074       0.445\n",
      "==============================================================================\n",
      "Omnibus:                       36.457   Durbin-Watson:                   2.013\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              174.520\n",
      "Skew:                           0.806   Prob(JB):                     1.27e-38\n",
      "Kurtosis:                       8.375   Cond. No.                     7.41e+07\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 7.41e+07. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "done\n"
     ]
    }
   ],
   "source": [
    "#hashtags = ['tweets_#gohawks.txt', 'tweets_#gopatriots.txt', 'tweets_#nfl.txt', 'tweets_#patriots.txt', 'tweets_#sb49.txt', 'tweets_#superbowl.txt']\n",
    "#with open('tweets_#all.txt','w',encoding=\"utf8\") as make:\n",
    " #   for file in hashtags:\n",
    "  #      with open(file,encoding=\"utf8\") as f:\n",
    "   #         for line in f:\n",
    "    #            make.write(line)\n",
    "#print('done making')\n",
    "\n",
    "tweetfile = 'tweets_#all.txt'\n",
    "file = []\n",
    "with open(tweetfile,encoding=\"utf8\") as f:\n",
    "    for line in f:\n",
    "        file.append(line)\n",
    "pst_tz = pytz.timezone('America/Los_Angeles')\n",
    "date,time,num_tweets,num_follow,num_retweets,num_mentions,rank_score,num_hashtags = [],[],[],[],[],[],[],[]\n",
    "time_5 = []\n",
    "for n,line in enumerate(file):\n",
    "    tw = json.loads(line)\n",
    "    timestamp = tw['citation_date']\n",
    "    timestamp = str(datetime.datetime.fromtimestamp(int(timestamp), pst_tz))\n",
    "    time_split = ''.join(timestamp[0:10].split('-'))\n",
    "    date.append(int(time_split))\n",
    "    time.append(int(timestamp[11:13]))\n",
    "    a,b,c,_ = timestamp.split(':')\n",
    "    rounded = str(int((int(b)/5))*5).zfill(2)\n",
    "    time_mins = timestamp[11:13] + rounded\n",
    "    time_5.append(int(time_mins))\n",
    "    \n",
    "    num_tweets.append(1)\n",
    "    num_follow.append(tw['author']['followers'])\n",
    "    num_retweets.append(tw['metrics']['citations']['total'])\n",
    "    num_mentions.append(len(tw['tweet']['entities']['user_mentions']))\n",
    "    rank_score.append(tw['metrics']['ranking_score'])\n",
    "    num_hashtags.append(tw['title'].count('#'))\n",
    "print('done loading')\n",
    "\n",
    "import statsmodels.api as sm\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "df = pd.DataFrame({'date':date,'time':time,'tweets':num_tweets,'followers':num_follow,'retweets':num_retweets,'mentions':num_mentions,'score':rank_score,'hashtags':num_hashtags},\n",
    "                  columns=['date','time','tweets', 'followers', 'retweets','mentions','score','hashtags'])\n",
    "df_5 = pd.DataFrame({'date':date,'time':time_5,'tweets':num_tweets,'followers':num_follow,'retweets':num_retweets,'mentions':num_mentions,'score':rank_score,'hashtags':num_hashtags},\n",
    "                  columns=['date','time','tweets', 'followers', 'retweets','mentions','score','hashtags'])\n",
    "df.to_csv('all.csv')\n",
    "df_5.to_csv('all_5mins.csv')\n",
    "df1 = pd.read_csv('all.csv')\n",
    "df1 = df1.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum, 'followers' : np.sum, 'retweets' : np.sum, 'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "df_5 = pd.read_csv('all_5mins.csv')\n",
    "df_5 = df_5.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum,  'followers' : np.sum, 'retweets' : np.sum, 'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "tweetfile = 'tweets_#all.txt'\n",
    "t1 = df1.query('date < 20150201 or (date == 20150201 and time < 8)')\n",
    "t2 = df_5.query('date == 20150201 and (time >= 800 and time <= 2000)')\n",
    "t3 = df1.query('date > 20150201 or (date == 20150201 and time > 20)')\n",
    "X = []\n",
    "for i in t1.index:\n",
    "    X.append(t1.loc[i, 'tweets':'hashtags'].values)\n",
    "X.pop()\n",
    "X = sm.add_constant(X)\n",
    "y = t1.loc[t1.index[1]:, 'tweets'].values\n",
    "model = sm.OLS(y,X).fit()\n",
    "pred_y = model.predict(X)\n",
    "print(\"MSE for %s for before Feb 1: %.6f\" % (tweetfile, mean_squared_error(y,pred_y)))\n",
    "print(model.summary())\n",
    "print('done')\n",
    "X = []\n",
    "for i in t2.index:\n",
    "    X.append(t2.loc[i, 'tweets':'hashtags'].values)\n",
    "X.pop()\n",
    "X = sm.add_constant(X)\n",
    "y = t2.loc[t2.index[1]:, 'tweets'].values\n",
    "model = sm.OLS(y,X).fit()\n",
    "pred_y = model.predict(X)\n",
    "print(\"MSE for %s  for between Feb 1: %.6f\" % (tweetfile, mean_squared_error(y,pred_y)))\n",
    "print(model.summary())\n",
    "print('done')\n",
    "X = []\n",
    "for i in t3.index:\n",
    "    X.append(t3.loc[i, 'tweets':'hashtags'].values)\n",
    "X.pop()\n",
    "X = sm.add_constant(X)\n",
    "y = t3.loc[t3.index[1]:, 'tweets'].values\n",
    "model = sm.OLS(y,X).fit()\n",
    "pred_y = model.predict(X)\n",
    "print(\"MSE for %s  for after Feb 1: %.6f\" % (tweetfile, mean_squared_error(y,pred_y)))\n",
    "print(model.summary())\n",
    "print('done')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 8"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First performing RandomizedSearchCV and then GridSearchCV on parameters close to those returned by RandomizedSearch."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best estimator for Random Forest: \n",
      " RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',\n",
      "                      max_depth=100, max_features='sqrt', max_leaf_nodes=None,\n",
      "                      max_samples=None, min_impurity_decrease=0.0,\n",
      "                      min_impurity_split=None, min_samples_leaf=2,\n",
      "                      min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
      "                      n_estimators=1000, n_jobs=None, oob_score=False,\n",
      "                      random_state=None, verbose=0, warm_start=False)\n",
      "Best score for Random Forest:  71332701.47122593\n",
      "Best parameters for Random Forest:  {'n_estimators': 1000, 'min_samples_split': 2, 'min_samples_leaf': 2, 'max_features': 'sqrt', 'max_depth': 100}\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x25d5c17d048>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best estimator for Gradient Boosting: \n",
      " GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',\n",
      "                          init=None, learning_rate=0.1, loss='ls', max_depth=10,\n",
      "                          max_features='sqrt', max_leaf_nodes=None,\n",
      "                          min_impurity_decrease=0.0, min_impurity_split=None,\n",
      "                          min_samples_leaf=1, min_samples_split=5,\n",
      "                          min_weight_fraction_leaf=0.0, n_estimators=1000,\n",
      "                          n_iter_no_change=None, presort='deprecated',\n",
      "                          random_state=None, subsample=1.0, tol=0.0001,\n",
      "                          validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Best score for Gradient Boosting:  11448227.614870276\n",
      "Best parameters for Gradient Boosting:  {'n_estimators': 1000, 'min_samples_split': 5, 'min_samples_leaf': 1, 'max_features': 'sqrt', 'max_depth': 10}\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x25d0149cba8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
    "from sklearn.model_selection import RandomizedSearchCV, KFold, GridSearchCV\n",
    "\n",
    "df = pd.read_csv('all.csv')\n",
    "df1 = df.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum, 'followers' : np.sum, 'retweets' : np.sum,'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "X = df1.loc[:,'tweets':].values\n",
    "y = df1['tweets'].values\n",
    "param_grid = {\n",
    "'max_depth': [10, 30, 50, 70, 100, 200, None],\n",
    "'max_features': ['auto', 'sqrt'],\n",
    "'min_samples_leaf': [1, 2,3, 4],\n",
    "'min_samples_split': [2, 5, 10],\n",
    "'n_estimators': [200, 400, 600, 800, 1000,\n",
    "1200, 1400, 1600, 1800, 2000]\n",
    "}\n",
    "rf = RandomForestRegressor()\n",
    "clf = RandomizedSearchCV(rf,param_grid,cv=KFold(n_splits=5,shuffle=True), n_jobs = -1, scoring='neg_mean_squared_error')\n",
    "clf.fit(X,y)\n",
    "print(\"Best estimator for Random Forest: \\n\", clf.best_estimator_)\n",
    "print(\"Best score for Random Forest: \", -1*clf.best_score_)\n",
    "print(\"Best parameters for Random Forest: \", clf.best_params_)\n",
    "plt.figure()\n",
    "plt.plot(-1*clf.cv_results_['mean_test_score'])\n",
    "plt.xlabel(\"Combination number\"); plt.ylabel('Test MSE'); plt.title('Random Forest')\n",
    "plt.show()\n",
    "gb = GradientBoostingRegressor()\n",
    "clf = RandomizedSearchCV(gb,param_grid,cv=KFold(n_splits=5,shuffle=True),scoring='neg_mean_squared_error')\n",
    "clf.fit(X,y)\n",
    "print(\"Best estimator for Gradient Boosting: \\n\", clf.best_estimator_)\n",
    "print(\"Best score for Gradient Boosting: \", -1*clf.best_score_)\n",
    "print(\"Best parameters for Gradient Boosting: \", clf.best_params_)\n",
    "plt.figure()\n",
    "plt.plot(-1*clf.cv_results_['mean_test_score'])\n",
    "plt.xlabel(\"Combination number\"); plt.ylabel('Test MSE'); plt.title('Gradient Boosting')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best estimator for Random Forest: \n",
      " RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',\n",
      "                      max_depth=100, max_features='sqrt', max_leaf_nodes=None,\n",
      "                      max_samples=None, min_impurity_decrease=0.0,\n",
      "                      min_impurity_split=None, min_samples_leaf=1,\n",
      "                      min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
      "                      n_estimators=900, n_jobs=None, oob_score=False,\n",
      "                      random_state=None, verbose=0, warm_start=False)\n",
      "Best score for Random Forest:  113579406.123123\n",
      "Best parameters for Random Forest:  {'max_depth': 100, 'max_features': 'sqrt', 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 900}\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x25d01521e80>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best estimator for Gradient Boosting: \n",
      " GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',\n",
      "                          init=None, learning_rate=0.1, loss='ls',\n",
      "                          max_depth=120, max_features='sqrt',\n",
      "                          max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
      "                          min_impurity_split=None, min_samples_leaf=2,\n",
      "                          min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
      "                          n_estimators=900, n_iter_no_change=None,\n",
      "                          presort='deprecated', random_state=None,\n",
      "                          subsample=1.0, tol=0.0001, validation_fraction=0.1,\n",
      "                          verbose=0, warm_start=False)\n",
      "Best score for Gradient Boosting:  7010299.256324455\n",
      "Best parameters for Gradient Boosting:  {'max_depth': 120, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 900}\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x25d00797cc0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
    "from sklearn.model_selection import GridSearchCV, KFold, GridSearchCV\n",
    "\n",
    "df = pd.read_csv('all.csv')\n",
    "df1 = df.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum, 'followers' : np.sum, 'retweets' : np.sum,'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "X = df1.loc[:,'tweets':].values\n",
    "y = df1['tweets'].values\n",
    "param_grid = {\n",
    "'max_depth': [90,  100, 110, 120],\n",
    "'max_features': ['sqrt'],\n",
    "'min_samples_leaf': [1, 2,3],\n",
    "'min_samples_split': [2],\n",
    "'n_estimators': [900, 1000, 1100, 1200]\n",
    "}\n",
    "rf = RandomForestRegressor()\n",
    "clf = GridSearchCV(rf,param_grid,cv=KFold(n_splits=5,shuffle=True), n_jobs = -1, scoring='neg_mean_squared_error')\n",
    "clf.fit(X,y)\n",
    "print(\"Best estimator for Random Forest: \\n\", clf.best_estimator_)\n",
    "print(\"Best score for Random Forest: \", -1*clf.best_score_)\n",
    "print(\"Best parameters for Random Forest: \", clf.best_params_)\n",
    "plt.figure()\n",
    "plt.plot(-1*clf.cv_results_['mean_test_score'])\n",
    "plt.xlabel(\"Combination number\"); plt.ylabel('Test MSE'); plt.title('Random Forest')\n",
    "plt.show()\n",
    "gb = GradientBoostingRegressor()\n",
    "clf = GridSearchCV(gb,param_grid,cv=KFold(n_splits=5,shuffle=True),scoring='neg_mean_squared_error')\n",
    "clf.fit(X,y)\n",
    "print(\"Best estimator for Gradient Boosting: \\n\", clf.best_estimator_)\n",
    "print(\"Best score for Gradient Boosting: \", -1*clf.best_score_)\n",
    "print(\"Best parameters for Gradient Boosting: \", clf.best_params_)\n",
    "plt.figure()\n",
    "plt.plot(-1*clf.cv_results_['mean_test_score'])\n",
    "plt.xlabel(\"Combination number\"); plt.ylabel('Test MSE'); plt.title('Gradient Boosting')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE for tweets_#all.txt  for : 106915516.820554\n",
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.866\n",
      "Model:                            OLS   Adj. R-squared:                  0.864\n",
      "Method:                 Least Squares   F-statistic:                     621.9\n",
      "Date:                Thu, 19 Mar 2020   Prob (F-statistic):          1.29e-248\n",
      "Time:                        16:06:43   Log-Likelihood:                -6248.3\n",
      "No. Observations:                 586   AIC:                         1.251e+04\n",
      "Df Residuals:                     579   BIC:                         1.254e+04\n",
      "Df Model:                           6                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const      -1143.6419    500.749     -2.284      0.023   -2127.148    -160.136\n",
      "x1           -43.5993      4.310    -10.115      0.000     -52.065     -35.134\n",
      "x2           5.76e-05   1.49e-05      3.864      0.000    2.83e-05    8.69e-05\n",
      "x3            -0.5499      0.040    -13.780      0.000      -0.628      -0.472\n",
      "x4             2.6897      0.226     11.926      0.000       2.247       3.133\n",
      "x5             9.1196      0.867     10.523      0.000       7.417      10.822\n",
      "x6             1.3657      0.238      5.728      0.000       0.897       1.834\n",
      "==============================================================================\n",
      "Omnibus:                      909.848   Durbin-Watson:                   1.956\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           530436.912\n",
      "Skew:                           8.508   Prob(JB):                         0.00\n",
      "Kurtosis:                     149.407   Cond. No.                     2.28e+08\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 2.28e+08. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "df = pd.read_csv('all.csv')\n",
    "df1 = df.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum, 'followers' : np.sum, 'retweets' : np.sum,'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "tweetfile = 'tweets_#all.txt'\n",
    "X = []\n",
    "for i in df1.index:\n",
    "    X.append(df1.loc[i, 'tweets':].values)\n",
    "X.pop()\n",
    "X = sm.add_constant(X)\n",
    "y = df1['tweets'].values[1:]\n",
    "model = sm.OLS(y,X).fit()\n",
    "pred_y = model.predict(X)\n",
    "print(\"MSE for %s  for : %.6f\" % (tweetfile, mean_squared_error(y,pred_y)))\n",
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 10"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First performing RandomizedSearchCV and then GridSearchCV on parameters close to those returned by RandomizedSearch."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best estimator for Gradient Boosting before Feb 1: \n",
      " GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',\n",
      "                          init=None, learning_rate=0.1, loss='ls',\n",
      "                          max_depth=200, max_features='sqrt',\n",
      "                          max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
      "                          min_impurity_split=None, min_samples_leaf=1,\n",
      "                          min_samples_split=10, min_weight_fraction_leaf=0.0,\n",
      "                          n_estimators=1200, n_iter_no_change=None,\n",
      "                          presort='deprecated', random_state=None,\n",
      "                          subsample=1.0, tol=0.0001, validation_fraction=0.1,\n",
      "                          verbose=0, warm_start=False)\n",
      "Best score for Gradient Boosting before Feb 1:  1087217.953959674\n",
      "Best parameters for Gradient Boosting before Feb 1:  {'n_estimators': 1200, 'min_samples_split': 10, 'min_samples_leaf': 1, 'max_features': 'sqrt', 'max_depth': 200}\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x25d01205240>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best estimator for Gradient Boosting between Feb 1: \n",
      " GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',\n",
      "                          init=None, learning_rate=0.1, loss='ls', max_depth=50,\n",
      "                          max_features='auto', max_leaf_nodes=None,\n",
      "                          min_impurity_decrease=0.0, min_impurity_split=None,\n",
      "                          min_samples_leaf=1, min_samples_split=10,\n",
      "                          min_weight_fraction_leaf=0.0, n_estimators=1000,\n",
      "                          n_iter_no_change=None, presort='deprecated',\n",
      "                          random_state=None, subsample=1.0, tol=0.0001,\n",
      "                          validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Best score for Gradient Boosting between Feb 1:  482995.0884585255\n",
      "Best parameters for Gradient Boosting between Feb 1:  {'n_estimators': 1000, 'min_samples_split': 10, 'min_samples_leaf': 1, 'max_features': 'auto', 'max_depth': 50}\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x25d5c179780>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best estimator for Gradient Boosting after Feb 1: \n",
      " GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',\n",
      "                          init=None, learning_rate=0.1, loss='ls',\n",
      "                          max_depth=200, max_features='auto',\n",
      "                          max_leaf_nodes=None, min_impurity_decrease=0.0,\n",
      "                          min_impurity_split=None, min_samples_leaf=1,\n",
      "                          min_samples_split=5, min_weight_fraction_leaf=0.0,\n",
      "                          n_estimators=1800, n_iter_no_change=None,\n",
      "                          presort='deprecated', random_state=None,\n",
      "                          subsample=1.0, tol=0.0001, validation_fraction=0.1,\n",
      "                          verbose=0, warm_start=False)\n",
      "Best score for Gradient Boosting after Feb 1:  41018.749013498076\n",
      "Best parameters for Gradient Boosting after Feb 1:  {'n_estimators': 1800, 'min_samples_split': 5, 'min_samples_leaf': 1, 'max_features': 'auto', 'max_depth': 200}\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x25d5c0129b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = pd.read_csv('all.csv')\n",
    "df1 = df.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum, 'followers' : np.sum, 'retweets' : np.sum, 'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "df_5 = pd.read_csv('all_5mins.csv')\n",
    "df_5 = df_5.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum,  'followers' : np.sum, 'retweets' : np.sum, 'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "t1 = df1.query('date < 20150201 or (date == 20150201 and time < 8)')\n",
    "t2 = df_5.query('date == 20150201 and (time >= 800 and time <= 2000)')\n",
    "t3 = df1.query('date > 20150201 or (date == 20150201 and time > 20)')\n",
    "\n",
    "param_grid = {'max_depth': [10, 30, 50, 70, 100, 200, None],\n",
    "'max_features': ['auto', 'sqrt'],\n",
    "'min_samples_leaf': [1, 2,3, 4],\n",
    "'min_samples_split': [2, 5, 10],\n",
    "'n_estimators': [200, 400, 600, 800, 1000,\n",
    "1200, 1400, 1600, 1800, 2000]}\n",
    "    \n",
    "X = t1.loc[:,'tweets':].values\n",
    "y = t1['tweets'].values\n",
    "gb = GradientBoostingRegressor()\n",
    "clf = RandomizedSearchCV(gb,param_grid,cv=KFold(n_splits=5,shuffle=True),scoring='neg_mean_squared_error')\n",
    "clf.fit(X,y)\n",
    "print(\"Best estimator for Gradient Boosting before Feb 1: \\n\", clf.best_estimator_)\n",
    "print(\"Best score for Gradient Boosting before Feb 1: \", -1*clf.best_score_)\n",
    "print(\"Best parameters for Gradient Boosting before Feb 1: \", clf.best_params_)\n",
    "plt.figure()\n",
    "plt.plot(-1*clf.cv_results_['mean_test_score'])\n",
    "plt.xlabel(\"Combination number\"); plt.ylabel('Test MSE'); plt.title('Gradient Boosting before Feb 1')\n",
    "plt.show()\n",
    "X = t2.loc[:,'tweets':].values\n",
    "y = t2['tweets'].values\n",
    "gb = GradientBoostingRegressor()\n",
    "clf = RandomizedSearchCV(gb,param_grid,cv=KFold(n_splits=5,shuffle=True),scoring='neg_mean_squared_error')\n",
    "clf.fit(X,y)\n",
    "print(\"Best estimator for Gradient Boosting between Feb 1: \\n\", clf.best_estimator_)\n",
    "print(\"Best score for Gradient Boosting between Feb 1: \", -1*clf.best_score_)\n",
    "print(\"Best parameters for Gradient Boosting between Feb 1: \", clf.best_params_)\n",
    "plt.figure()\n",
    "plt.plot(-1*clf.cv_results_['mean_test_score'])\n",
    "plt.xlabel(\"Combination number\"); plt.ylabel('Test MSE'); plt.title('Gradient Boosting between Feb 1')\n",
    "plt.show()\n",
    "X = t3.loc[:,'tweets':].values\n",
    "y = t3['tweets'].values\n",
    "gb = GradientBoostingRegressor()\n",
    "clf = RandomizedSearchCV(gb,param_grid,cv=KFold(n_splits=5,shuffle=True),scoring='neg_mean_squared_error')\n",
    "clf.fit(X,y)\n",
    "print(\"Best estimator for Gradient Boosting after Feb 1: \\n\", clf.best_estimator_)\n",
    "print(\"Best score for Gradient Boosting after Feb 1: \", -1*clf.best_score_)\n",
    "print(\"Best parameters for Gradient Boosting after Feb 1: \", clf.best_params_)\n",
    "plt.figure()\n",
    "plt.plot(-1*clf.cv_results_['mean_test_score'])\n",
    "plt.xlabel(\"Combination number\"); plt.ylabel('Test MSE'); plt.title('Gradient Boosting after Feb 1')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best estimator for Gradient Boosting before Feb 1: \n",
      " GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',\n",
      "                          init=None, learning_rate=0.1, loss='ls', max_depth=60,\n",
      "                          max_features='auto', max_leaf_nodes=None,\n",
      "                          min_impurity_decrease=0.0, min_impurity_split=None,\n",
      "                          min_samples_leaf=1, min_samples_split=10,\n",
      "                          min_weight_fraction_leaf=0.0, n_estimators=1000,\n",
      "                          n_iter_no_change=None, presort='deprecated',\n",
      "                          random_state=None, subsample=1.0, tol=0.0001,\n",
      "                          validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Best score for Gradient Boosting before Feb 1:  1082998.1867112794\n",
      "Best parameters for Gradient Boosting before Feb 1:  {'max_depth': 60, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 10, 'n_estimators': 1000}\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x2794209a9e8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best estimator for Gradient Boosting between Feb 1: \n",
      " GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',\n",
      "                          init=None, learning_rate=0.1, loss='ls', max_depth=60,\n",
      "                          max_features='auto', max_leaf_nodes=None,\n",
      "                          min_impurity_decrease=0.0, min_impurity_split=None,\n",
      "                          min_samples_leaf=1, min_samples_split=10,\n",
      "                          min_weight_fraction_leaf=0.0, n_estimators=1100,\n",
      "                          n_iter_no_change=None, presort='deprecated',\n",
      "                          random_state=None, subsample=1.0, tol=0.0001,\n",
      "                          validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Best score for Gradient Boosting between Feb 1:  121443.65689643877\n",
      "Best parameters for Gradient Boosting between Feb 1:  {'max_depth': 60, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 10, 'n_estimators': 1100}\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x27942174e10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best estimator for Gradient Boosting after Feb 1: \n",
      " GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',\n",
      "                          init=None, learning_rate=0.1, loss='ls', max_depth=50,\n",
      "                          max_features='auto', max_leaf_nodes=None,\n",
      "                          min_impurity_decrease=0.0, min_impurity_split=None,\n",
      "                          min_samples_leaf=1, min_samples_split=5,\n",
      "                          min_weight_fraction_leaf=0.0, n_estimators=1800,\n",
      "                          n_iter_no_change=None, presort='deprecated',\n",
      "                          random_state=None, subsample=1.0, tol=0.0001,\n",
      "                          validation_fraction=0.1, verbose=0, warm_start=False)\n",
      "Best score for Gradient Boosting after Feb 1:  28327.86579886077\n",
      "Best parameters for Gradient Boosting after Feb 1:  {'max_depth': 50, 'max_features': 'auto', 'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 1800}\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x279421d9780>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = pd.read_csv('all.csv')\n",
    "df1 = df.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum, 'followers' : np.sum, 'retweets' : np.sum, 'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "df_5 = pd.read_csv('all_5mins.csv')\n",
    "df_5 = df_5.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum,  'followers' : np.sum, 'retweets' : np.sum, 'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "t1 = df1.query('date < 20150201 or (date == 20150201 and time < 8)')\n",
    "t2 = df_5.query('date == 20150201 and (time >= 800 and time <= 2000)')\n",
    "t3 = df1.query('date > 20150201 or (date == 20150201 and time > 20)')\n",
    "param_grid = {'max_depth': [40, 50, 60, 150, 200, 250],'max_features': ['auto'],'min_samples_leaf': [1, 2],'min_samples_split': [5, 10],\n",
    "              'n_estimators': [1000, 1100,1200, 1800, 1900]}\n",
    "X = t1.loc[:,'tweets':].values\n",
    "y = t1['tweets'].values\n",
    "gb = GradientBoostingRegressor()\n",
    "clf = GridSearchCV(gb,param_grid,cv=KFold(n_splits=5,shuffle=True),scoring='neg_mean_squared_error')\n",
    "clf.fit(X,y)\n",
    "print(\"Best estimator for Gradient Boosting before Feb 1: \\n\", clf.best_estimator_)\n",
    "print(\"Best score for Gradient Boosting before Feb 1: \", -1*clf.best_score_)\n",
    "print(\"Best parameters for Gradient Boosting before Feb 1: \", clf.best_params_)\n",
    "plt.figure()\n",
    "plt.plot(-1*clf.cv_results_['mean_test_score'])\n",
    "plt.xlabel(\"Combination number\"); plt.ylabel('Test MSE'); plt.title('Gradient Boosting before Feb 1')\n",
    "plt.show()\n",
    "X = t2.loc[:,'tweets':].values\n",
    "y = t2['tweets'].values\n",
    "gb = GradientBoostingRegressor()\n",
    "clf = GridSearchCV(gb,param_grid,cv=KFold(n_splits=5,shuffle=True),scoring='neg_mean_squared_error')\n",
    "clf.fit(X,y)\n",
    "print(\"Best estimator for Gradient Boosting between Feb 1: \\n\", clf.best_estimator_)\n",
    "print(\"Best score for Gradient Boosting between Feb 1: \", -1*clf.best_score_)\n",
    "print(\"Best parameters for Gradient Boosting between Feb 1: \", clf.best_params_)\n",
    "plt.figure()\n",
    "plt.plot(-1*clf.cv_results_['mean_test_score'])\n",
    "plt.xlabel(\"Combination number\"); plt.ylabel('Test MSE'); plt.title('Gradient Boosting between Feb 1')\n",
    "plt.show()\n",
    "X = t3.loc[:,'tweets':].values\n",
    "y = t3['tweets'].values\n",
    "gb = GradientBoostingRegressor()\n",
    "clf = GridSearchCV(gb,param_grid,cv=KFold(n_splits=5,shuffle=True),scoring='neg_mean_squared_error')\n",
    "clf.fit(X,y)\n",
    "print(\"Best estimator for Gradient Boosting after Feb 1: \\n\", clf.best_estimator_)\n",
    "print(\"Best score for Gradient Boosting after Feb 1: \", -1*clf.best_score_)\n",
    "print(\"Best parameters for Gradient Boosting after Feb 1: \", clf.best_params_)\n",
    "plt.figure()\n",
    "plt.plot(-1*clf.cv_results_['mean_test_score'])\n",
    "plt.xlabel(\"Combination number\"); plt.ylabel('Test MSE'); plt.title('Gradient Boosting after Feb 1')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 11"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 8 candidates, totalling 40 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:  5.1min\n",
      "[Parallel(n_jobs=-1)]: Done  40 out of  40 | elapsed: 15.9min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best estimator for Neural Network : \n",
      " MLPRegressor(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,\n",
      "             beta_2=0.999, early_stopping=False, epsilon=1e-08,\n",
      "             hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,\n",
      "                                 1200, 1200, 1200, 1200),\n",
      "             learning_rate='constant', learning_rate_init=0.001, max_fun=15000,\n",
      "             max_iter=200, momentum=0.9, n_iter_no_change=10,\n",
      "             nesterovs_momentum=True, power_t=0.5, random_state=None,\n",
      "             shuffle=True, solver='adam', tol=0.0001, validation_fraction=0.1,\n",
      "             verbose=False, warm_start=False)\n",
      "Best score for Neural Network :  89865412.91266368\n",
      "Best parameters for Neural Network :  {'hidden_layer_sizes': (1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200)}\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x124be1269e8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x124be6cfc50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.neural_network import MLPRegressor\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "#from sklearn.metrics import mean_train_score, mean_test_score\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "df = pd.read_csv('all.csv')\n",
    "df1 = df.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum, 'followers' : np.sum, 'retweets' : np.sum, 'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "X = df1.loc[:,'tweets':].values\n",
    "y = df1['tweets'].values\n",
    "param = {'hidden_layer_sizes':[(100,), (200,200,), (300,300,300,), (400,400,400,400,),\n",
    "                               (500,500,500,500,500,), (600,600,600,600,600,600,),\n",
    "                               (700,700,700,700,700,700,700,),\n",
    "                               (1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,)] }\n",
    "nn = MLPRegressor()\n",
    "clf = RandomizedSearchCV(nn,param,cv=KFold(n_splits=5,shuffle=True),scoring='neg_mean_squared_error', n_jobs=-1, verbose=2, return_train_score=True)\n",
    "clf.fit(X,y)\n",
    "print(\"Best estimator for Neural Network : \\n\", clf.best_estimator_)\n",
    "print(\"Best score for Neural Network : \", -1*clf.best_score_)\n",
    "print(\"Best parameters for Neural Network : \", clf.best_params_)\n",
    "plt.figure()\n",
    "plt.plot(-1*clf.cv_results_['mean_train_score'])\n",
    "plt.xlabel(\"Combination number\"); plt.ylabel('Train MSE'); plt.title('Neural Network')\n",
    "plt.figure()\n",
    "plt.plot(-1*clf.cv_results_['mean_test_score'])\n",
    "plt.xlabel(\"Combination number\"); plt.ylabel('Test MSE'); plt.title('Neural Network')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training MSE using StandardScaler with 11 layers and 1100 neurons in each layer:  993603.0070076048\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "df = pd.read_csv('all.csv')\n",
    "df1 = df.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum, 'followers' : np.sum, 'retweets' : np.sum, 'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "X = df1.loc[:,'tweets':].values\n",
    "y = df1['tweets'].values\n",
    "X_ss = StandardScaler().fit_transform(X)\n",
    "nn = MLPRegressor(hidden_layer_sizes=(1100,1100,1100,1100,1100,1100,1100,1100,1100,1100,1100,))\n",
    "nn.fit(X_ss,y)\n",
    "print(\"Training MSE using StandardScaler with 11 layers and 1100 neurons in each layer: \", nn.loss_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 13"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 12 candidates, totalling 60 fits\n",
      "[CV] hidden_layer_sizes=(100,) .......................................\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] ........................ hidden_layer_sizes=(100,), total=   1.4s\n",
      "[CV] hidden_layer_sizes=(100,) .......................................\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.3s remaining:    0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] ........................ hidden_layer_sizes=(100,), total=   1.3s\n",
      "[CV] hidden_layer_sizes=(100,) .......................................\n",
      "[CV] ........................ hidden_layer_sizes=(100,), total=   1.3s\n",
      "[CV] hidden_layer_sizes=(100,) .......................................\n",
      "[CV] ........................ hidden_layer_sizes=(100,), total=   1.3s\n",
      "[CV] hidden_layer_sizes=(100,) .......................................\n",
      "[CV] ........................ hidden_layer_sizes=(100,), total=   1.4s\n",
      "[CV] hidden_layer_sizes=(200, 200) ...................................\n",
      "[CV] .................... hidden_layer_sizes=(200, 200), total=  10.5s\n",
      "[CV] hidden_layer_sizes=(200, 200) ...................................\n",
      "[CV] .................... hidden_layer_sizes=(200, 200), total=  10.6s\n",
      "[CV] hidden_layer_sizes=(200, 200) ...................................\n",
      "[CV] .................... hidden_layer_sizes=(200, 200), total=  10.2s\n",
      "[CV] hidden_layer_sizes=(200, 200) ...................................\n",
      "[CV] .................... hidden_layer_sizes=(200, 200), total=  10.0s\n",
      "[CV] hidden_layer_sizes=(200, 200) ...................................\n",
      "[CV] .................... hidden_layer_sizes=(200, 200), total=  10.1s\n",
      "[CV] hidden_layer_sizes=(300, 300, 300) ..............................\n",
      "[CV] ............... hidden_layer_sizes=(300, 300, 300), total=  22.3s\n",
      "[CV] hidden_layer_sizes=(300, 300, 300) ..............................\n",
      "[CV] ............... hidden_layer_sizes=(300, 300, 300), total=  22.3s\n",
      "[CV] hidden_layer_sizes=(300, 300, 300) ..............................\n",
      "[CV] ............... hidden_layer_sizes=(300, 300, 300), total=  22.4s\n",
      "[CV] hidden_layer_sizes=(300, 300, 300) ..............................\n",
      "[CV] ............... hidden_layer_sizes=(300, 300, 300), total=  22.4s\n",
      "[CV] hidden_layer_sizes=(300, 300, 300) ..............................\n",
      "[CV] ............... hidden_layer_sizes=(300, 300, 300), total=  22.2s\n",
      "[CV] hidden_layer_sizes=(400, 400, 400, 400) .........................\n",
      "[CV] .......... hidden_layer_sizes=(400, 400, 400, 400), total=  40.7s\n",
      "[CV] hidden_layer_sizes=(400, 400, 400, 400) .........................\n",
      "[CV] .......... hidden_layer_sizes=(400, 400, 400, 400), total=  44.8s\n",
      "[CV] hidden_layer_sizes=(400, 400, 400, 400) .........................\n",
      "[CV] .......... hidden_layer_sizes=(400, 400, 400, 400), total=  44.7s\n",
      "[CV] hidden_layer_sizes=(400, 400, 400, 400) .........................\n",
      "[CV] .......... hidden_layer_sizes=(400, 400, 400, 400), total=  42.8s\n",
      "[CV] hidden_layer_sizes=(400, 400, 400, 400) .........................\n",
      "[CV] .......... hidden_layer_sizes=(400, 400, 400, 400), total=  47.3s\n",
      "[CV] hidden_layer_sizes=(500, 500, 500, 500, 500) ....................\n",
      "[CV] ..... hidden_layer_sizes=(500, 500, 500, 500, 500), total= 1.5min\n",
      "[CV] hidden_layer_sizes=(500, 500, 500, 500, 500) ....................\n",
      "[CV] ..... hidden_layer_sizes=(500, 500, 500, 500, 500), total= 1.3min\n",
      "[CV] hidden_layer_sizes=(500, 500, 500, 500, 500) ....................\n",
      "[CV] ..... hidden_layer_sizes=(500, 500, 500, 500, 500), total= 1.3min\n",
      "[CV] hidden_layer_sizes=(500, 500, 500, 500, 500) ....................\n",
      "[CV] ..... hidden_layer_sizes=(500, 500, 500, 500, 500), total= 1.3min\n",
      "[CV] hidden_layer_sizes=(500, 500, 500, 500, 500) ....................\n",
      "[CV] ..... hidden_layer_sizes=(500, 500, 500, 500, 500), total= 1.3min\n",
      "[CV] hidden_layer_sizes=(600, 600, 600, 600, 600, 600) ...............\n",
      "[CV]  hidden_layer_sizes=(600, 600, 600, 600, 600, 600), total= 1.7min\n",
      "[CV] hidden_layer_sizes=(600, 600, 600, 600, 600, 600) ...............\n",
      "[CV]  hidden_layer_sizes=(600, 600, 600, 600, 600, 600), total= 1.7min\n",
      "[CV] hidden_layer_sizes=(600, 600, 600, 600, 600, 600) ...............\n",
      "[CV]  hidden_layer_sizes=(600, 600, 600, 600, 600, 600), total= 2.2min\n",
      "[CV] hidden_layer_sizes=(600, 600, 600, 600, 600, 600) ...............\n",
      "[CV]  hidden_layer_sizes=(600, 600, 600, 600, 600, 600), total= 1.2min\n",
      "[CV] hidden_layer_sizes=(600, 600, 600, 600, 600, 600) ...............\n",
      "[CV]  hidden_layer_sizes=(600, 600, 600, 600, 600, 600), total= 1.8min\n",
      "[CV] hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700) ..........\n",
      "[CV]  hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700), total= 2.8min\n",
      "[CV] hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700) ..........\n",
      "[CV]  hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700), total= 3.3min\n",
      "[CV] hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700) ..........\n",
      "[CV]  hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700), total= 1.8min\n",
      "[CV] hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700) ..........\n",
      "[CV]  hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700), total= 1.8min\n",
      "[CV] hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700) ..........\n",
      "[CV]  hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700), total= 1.6min\n",
      "[CV] hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800) .....\n",
      "[CV]  hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800), total= 3.4min\n",
      "[CV] hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800) .....\n",
      "[CV]  hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800), total= 4.9min\n",
      "[CV] hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800) .....\n",
      "[CV]  hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800), total= 2.8min\n",
      "[CV] hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800) .....\n",
      "[CV]  hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800), total= 2.4min\n",
      "[CV] hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800) .....\n",
      "[CV]  hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800), total= 3.6min\n",
      "[CV] hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900) \n",
      "[CV]  hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900), total= 5.7min\n",
      "[CV] hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900) \n",
      "[CV]  hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900), total=107.2min\n",
      "[CV] hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900) \n",
      "[CV]  hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900), total=  54.3s\n",
      "[CV] hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900) \n",
      "[CV]  hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900), total=  21.1s\n",
      "[CV] hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900) \n",
      "[CV]  hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900), total=  23.3s\n",
      "[CV] hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000) \n",
      "[CV]  hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000), total=  32.0s\n",
      "[CV] hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000) \n",
      "[CV]  hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000), total= 3.0min\n",
      "[CV] hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000) \n",
      "[CV]  hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000), total=  56.4s\n",
      "[CV] hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000) \n",
      "[CV]  hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000), total= 2.2min\n",
      "[CV] hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000) \n",
      "[CV]  hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000), total= 1.1min\n",
      "[CV] hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100) \n",
      "[CV]  hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100), total=  36.6s\n",
      "[CV] hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100) \n",
      "[CV]  hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100), total= 1.6min\n",
      "[CV] hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100) \n",
      "[CV]  hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100), total=  36.0s\n",
      "[CV] hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100) \n",
      "[CV]  hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100), total= 1.8min\n",
      "[CV] hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100) \n",
      "[CV]  hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100), total= 3.0min\n",
      "[CV] hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200) \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV]  hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200), total=  45.0s\n",
      "[CV] hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200) \n",
      "[CV]  hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200), total=  42.2s\n",
      "[CV] hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200) \n",
      "[CV]  hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200), total=  45.1s\n",
      "[CV] hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200) \n",
      "[CV]  hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200), total=  45.1s\n",
      "[CV] hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200) \n",
      "[CV]  hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200), total=  45.4s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done  60 out of  60 | elapsed: 183.9min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best estimator for Neural Network Before Feb 1: \n",
      " MLPRegressor(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,\n",
      "             beta_2=0.999, early_stopping=False, epsilon=1e-08,\n",
      "             hidden_layer_sizes=(600, 600, 600, 600, 600, 600),\n",
      "             learning_rate='constant', learning_rate_init=0.001, max_fun=15000,\n",
      "             max_iter=200, momentum=0.9, n_iter_no_change=10,\n",
      "             nesterovs_momentum=True, power_t=0.5, random_state=None,\n",
      "             shuffle=True, solver='adam', tol=0.0001, validation_fraction=0.1,\n",
      "             verbose=False, warm_start=False)\n",
      "Best score for Neural Network Before Feb 1:  6207.911390030856\n",
      "Best parameters for Neural Network Before Feb 1:  {'hidden_layer_sizes': (600, 600, 600, 600, 600, 600)}\n",
      "Fitting 5 folds for each of 12 candidates, totalling 60 fits\n",
      "[CV] hidden_layer_sizes=(100,) .......................................\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] ........................ hidden_layer_sizes=(100,), total=   0.3s\n",
      "[CV] hidden_layer_sizes=(100,) .......................................\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.2s remaining:    0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] ........................ hidden_layer_sizes=(100,), total=   0.3s\n",
      "[CV] hidden_layer_sizes=(100,) .......................................\n",
      "[CV] ........................ hidden_layer_sizes=(100,), total=   0.3s\n",
      "[CV] hidden_layer_sizes=(100,) .......................................\n",
      "[CV] ........................ hidden_layer_sizes=(100,), total=   0.3s\n",
      "[CV] hidden_layer_sizes=(100,) .......................................\n",
      "[CV] ........................ hidden_layer_sizes=(100,), total=   0.3s\n",
      "[CV] hidden_layer_sizes=(200, 200) ...................................\n",
      "[CV] .................... hidden_layer_sizes=(200, 200), total=   2.7s\n",
      "[CV] hidden_layer_sizes=(200, 200) ...................................\n",
      "[CV] .................... hidden_layer_sizes=(200, 200), total=   2.7s\n",
      "[CV] hidden_layer_sizes=(200, 200) ...................................\n",
      "[CV] .................... hidden_layer_sizes=(200, 200), total=   2.7s\n",
      "[CV] hidden_layer_sizes=(200, 200) ...................................\n",
      "[CV] .................... hidden_layer_sizes=(200, 200), total=   2.7s\n",
      "[CV] hidden_layer_sizes=(200, 200) ...................................\n",
      "[CV] .................... hidden_layer_sizes=(200, 200), total=   2.7s\n",
      "[CV] hidden_layer_sizes=(300, 300, 300) ..............................\n",
      "[CV] ............... hidden_layer_sizes=(300, 300, 300), total=   6.4s\n",
      "[CV] hidden_layer_sizes=(300, 300, 300) ..............................\n",
      "[CV] ............... hidden_layer_sizes=(300, 300, 300), total=   6.3s\n",
      "[CV] hidden_layer_sizes=(300, 300, 300) ..............................\n",
      "[CV] ............... hidden_layer_sizes=(300, 300, 300), total=   6.3s\n",
      "[CV] hidden_layer_sizes=(300, 300, 300) ..............................\n",
      "[CV] ............... hidden_layer_sizes=(300, 300, 300), total=   6.3s\n",
      "[CV] hidden_layer_sizes=(300, 300, 300) ..............................\n",
      "[CV] ............... hidden_layer_sizes=(300, 300, 300), total=   3.4s\n",
      "[CV] hidden_layer_sizes=(400, 400, 400, 400) .........................\n",
      "[CV] .......... hidden_layer_sizes=(400, 400, 400, 400), total=  10.9s\n",
      "[CV] hidden_layer_sizes=(400, 400, 400, 400) .........................\n",
      "[CV] .......... hidden_layer_sizes=(400, 400, 400, 400), total=  10.9s\n",
      "[CV] hidden_layer_sizes=(400, 400, 400, 400) .........................\n",
      "[CV] .......... hidden_layer_sizes=(400, 400, 400, 400), total=  10.8s\n",
      "[CV] hidden_layer_sizes=(400, 400, 400, 400) .........................\n",
      "[CV] .......... hidden_layer_sizes=(400, 400, 400, 400), total=  10.8s\n",
      "[CV] hidden_layer_sizes=(400, 400, 400, 400) .........................\n",
      "[CV] .......... hidden_layer_sizes=(400, 400, 400, 400), total=  10.8s\n",
      "[CV] hidden_layer_sizes=(500, 500, 500, 500, 500) ....................\n",
      "[CV] ..... hidden_layer_sizes=(500, 500, 500, 500, 500), total=  20.5s\n",
      "[CV] hidden_layer_sizes=(500, 500, 500, 500, 500) ....................\n",
      "[CV] ..... hidden_layer_sizes=(500, 500, 500, 500, 500), total=  20.5s\n",
      "[CV] hidden_layer_sizes=(500, 500, 500, 500, 500) ....................\n",
      "[CV] ..... hidden_layer_sizes=(500, 500, 500, 500, 500), total=  20.5s\n",
      "[CV] hidden_layer_sizes=(500, 500, 500, 500, 500) ....................\n",
      "[CV] ..... hidden_layer_sizes=(500, 500, 500, 500, 500), total=  20.6s\n",
      "[CV] hidden_layer_sizes=(500, 500, 500, 500, 500) ....................\n",
      "[CV] ..... hidden_layer_sizes=(500, 500, 500, 500, 500), total=  20.7s\n",
      "[CV] hidden_layer_sizes=(600, 600, 600, 600, 600, 600) ...............\n",
      "[CV]  hidden_layer_sizes=(600, 600, 600, 600, 600, 600), total=  35.7s\n",
      "[CV] hidden_layer_sizes=(600, 600, 600, 600, 600, 600) ...............\n",
      "[CV]  hidden_layer_sizes=(600, 600, 600, 600, 600, 600), total=  35.8s\n",
      "[CV] hidden_layer_sizes=(600, 600, 600, 600, 600, 600) ...............\n",
      "[CV]  hidden_layer_sizes=(600, 600, 600, 600, 600, 600), total=  35.7s\n",
      "[CV] hidden_layer_sizes=(600, 600, 600, 600, 600, 600) ...............\n",
      "[CV]  hidden_layer_sizes=(600, 600, 600, 600, 600, 600), total=  35.9s\n",
      "[CV] hidden_layer_sizes=(600, 600, 600, 600, 600, 600) ...............\n",
      "[CV]  hidden_layer_sizes=(600, 600, 600, 600, 600, 600), total=  35.9s\n",
      "[CV] hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700) ..........\n",
      "[CV]  hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700), total=  56.2s\n",
      "[CV] hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700) ..........\n",
      "[CV]  hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700), total=  56.4s\n",
      "[CV] hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700) ..........\n",
      "[CV]  hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700), total=  56.3s\n",
      "[CV] hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700) ..........\n",
      "[CV]  hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700), total=  56.3s\n",
      "[CV] hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700) ..........\n",
      "[CV]  hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700), total=  56.5s\n",
      "[CV] hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800) .....\n",
      "[CV]  hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800), total= 1.4min\n",
      "[CV] hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800) .....\n",
      "[CV]  hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800), total= 1.4min\n",
      "[CV] hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800) .....\n",
      "[CV]  hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800), total= 1.4min\n",
      "[CV] hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800) .....\n",
      "[CV]  hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800), total= 1.4min\n",
      "[CV] hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800) .....\n",
      "[CV]  hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800), total= 1.4min\n",
      "[CV] hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900) \n",
      "[CV]  hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900), total= 2.0min\n",
      "[CV] hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900) \n",
      "[CV]  hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900), total= 2.0min\n",
      "[CV] hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900) \n",
      "[CV]  hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900), total= 2.0min\n",
      "[CV] hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900) \n",
      "[CV]  hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900), total= 2.0min\n",
      "[CV] hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900) \n",
      "[CV]  hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900), total= 2.0min\n",
      "[CV] hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000) \n",
      "[CV]  hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000), total=  17.3s\n",
      "[CV] hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000) \n",
      "[CV]  hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000), total=  15.7s\n",
      "[CV] hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000) \n",
      "[CV]  hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000), total=  17.5s\n",
      "[CV] hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000) \n",
      "[CV]  hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000), total= 2.7min\n",
      "[CV] hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000) \n",
      "[CV]  hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000), total=  17.3s\n",
      "[CV] hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100) \n",
      "[CV]  hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100), total=  21.9s\n",
      "[CV] hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100) \n",
      "[CV]  hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100), total=  22.1s\n",
      "[CV] hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100) \n",
      "[CV]  hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100), total= 3.6min\n",
      "[CV] hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100) \n",
      "[CV]  hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100), total=  22.2s\n",
      "[CV] hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100) \n",
      "[CV]  hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100), total= 3.4min\n",
      "[CV] hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200) \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV]  hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200), total=  24.4s\n",
      "[CV] hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200) \n",
      "[CV]  hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200), total=  27.2s\n",
      "[CV] hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200) \n",
      "[CV]  hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200), total=  27.1s\n",
      "[CV] hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200) \n",
      "[CV]  hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200), total=  27.0s\n",
      "[CV] hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200) \n",
      "[CV]  hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200), total=  26.3s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done  60 out of  60 | elapsed: 42.1min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best estimator for Neural Network Between Feb 1: \n",
      " MLPRegressor(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,\n",
      "             beta_2=0.999, early_stopping=False, epsilon=1e-08,\n",
      "             hidden_layer_sizes=(500, 500, 500, 500, 500),\n",
      "             learning_rate='constant', learning_rate_init=0.001, max_fun=15000,\n",
      "             max_iter=200, momentum=0.9, n_iter_no_change=10,\n",
      "             nesterovs_momentum=True, power_t=0.5, random_state=None,\n",
      "             shuffle=True, solver='adam', tol=0.0001, validation_fraction=0.1,\n",
      "             verbose=False, warm_start=False)\n",
      "Best score for Neural Network Between Feb 1:  213436.841651512\n",
      "Best parameters for Neural Network Between Feb 1:  {'hidden_layer_sizes': (500, 500, 500, 500, 500)}\n",
      "Fitting 5 folds for each of 12 candidates, totalling 60 fits\n",
      "[CV] hidden_layer_sizes=(100,) .......................................\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] ........................ hidden_layer_sizes=(100,), total=   0.3s\n",
      "[CV] hidden_layer_sizes=(100,) .......................................\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.2s remaining:    0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] ........................ hidden_layer_sizes=(100,), total=   0.3s\n",
      "[CV] hidden_layer_sizes=(100,) .......................................\n",
      "[CV] ........................ hidden_layer_sizes=(100,), total=   0.3s\n",
      "[CV] hidden_layer_sizes=(100,) .......................................\n",
      "[CV] ........................ hidden_layer_sizes=(100,), total=   0.3s\n",
      "[CV] hidden_layer_sizes=(100,) .......................................\n",
      "[CV] ........................ hidden_layer_sizes=(100,), total=   0.3s\n",
      "[CV] hidden_layer_sizes=(200, 200) ...................................\n",
      "[CV] .................... hidden_layer_sizes=(200, 200), total=   2.7s\n",
      "[CV] hidden_layer_sizes=(200, 200) ...................................\n",
      "[CV] .................... hidden_layer_sizes=(200, 200), total=   2.7s\n",
      "[CV] hidden_layer_sizes=(200, 200) ...................................\n",
      "[CV] .................... hidden_layer_sizes=(200, 200), total=   2.6s\n",
      "[CV] hidden_layer_sizes=(200, 200) ...................................\n",
      "[CV] .................... hidden_layer_sizes=(200, 200), total=   2.6s\n",
      "[CV] hidden_layer_sizes=(200, 200) ...................................\n",
      "[CV] .................... hidden_layer_sizes=(200, 200), total=   2.6s\n",
      "[CV] hidden_layer_sizes=(300, 300, 300) ..............................\n",
      "[CV] ............... hidden_layer_sizes=(300, 300, 300), total=   2.2s\n",
      "[CV] hidden_layer_sizes=(300, 300, 300) ..............................\n",
      "[CV] ............... hidden_layer_sizes=(300, 300, 300), total=   2.1s\n",
      "[CV] hidden_layer_sizes=(300, 300, 300) ..............................\n",
      "[CV] ............... hidden_layer_sizes=(300, 300, 300), total=   2.3s\n",
      "[CV] hidden_layer_sizes=(300, 300, 300) ..............................\n",
      "[CV] ............... hidden_layer_sizes=(300, 300, 300), total=   2.1s\n",
      "[CV] hidden_layer_sizes=(300, 300, 300) ..............................\n",
      "[CV] ............... hidden_layer_sizes=(300, 300, 300), total=   2.2s\n",
      "[CV] hidden_layer_sizes=(400, 400, 400, 400) .........................\n",
      "[CV] .......... hidden_layer_sizes=(400, 400, 400, 400), total=  10.4s\n",
      "[CV] hidden_layer_sizes=(400, 400, 400, 400) .........................\n",
      "[CV] .......... hidden_layer_sizes=(400, 400, 400, 400), total=  10.4s\n",
      "[CV] hidden_layer_sizes=(400, 400, 400, 400) .........................\n",
      "[CV] .......... hidden_layer_sizes=(400, 400, 400, 400), total=  10.4s\n",
      "[CV] hidden_layer_sizes=(400, 400, 400, 400) .........................\n",
      "[CV] .......... hidden_layer_sizes=(400, 400, 400, 400), total=  10.4s\n",
      "[CV] hidden_layer_sizes=(400, 400, 400, 400) .........................\n",
      "[CV] .......... hidden_layer_sizes=(400, 400, 400, 400), total=  10.4s\n",
      "[CV] hidden_layer_sizes=(500, 500, 500, 500, 500) ....................\n",
      "[CV] ..... hidden_layer_sizes=(500, 500, 500, 500, 500), total=  19.8s\n",
      "[CV] hidden_layer_sizes=(500, 500, 500, 500, 500) ....................\n",
      "[CV] ..... hidden_layer_sizes=(500, 500, 500, 500, 500), total=  19.8s\n",
      "[CV] hidden_layer_sizes=(500, 500, 500, 500, 500) ....................\n",
      "[CV] ..... hidden_layer_sizes=(500, 500, 500, 500, 500), total=  19.8s\n",
      "[CV] hidden_layer_sizes=(500, 500, 500, 500, 500) ....................\n",
      "[CV] ..... hidden_layer_sizes=(500, 500, 500, 500, 500), total=  19.8s\n",
      "[CV] hidden_layer_sizes=(500, 500, 500, 500, 500) ....................\n",
      "[CV] ..... hidden_layer_sizes=(500, 500, 500, 500, 500), total=  20.0s\n",
      "[CV] hidden_layer_sizes=(600, 600, 600, 600, 600, 600) ...............\n",
      "[CV]  hidden_layer_sizes=(600, 600, 600, 600, 600, 600), total=  36.3s\n",
      "[CV] hidden_layer_sizes=(600, 600, 600, 600, 600, 600) ...............\n",
      "[CV]  hidden_layer_sizes=(600, 600, 600, 600, 600, 600), total=  34.5s\n",
      "[CV] hidden_layer_sizes=(600, 600, 600, 600, 600, 600) ...............\n",
      "[CV]  hidden_layer_sizes=(600, 600, 600, 600, 600, 600), total=  34.2s\n",
      "[CV] hidden_layer_sizes=(600, 600, 600, 600, 600, 600) ...............\n",
      "[CV]  hidden_layer_sizes=(600, 600, 600, 600, 600, 600), total=  34.4s\n",
      "[CV] hidden_layer_sizes=(600, 600, 600, 600, 600, 600) ...............\n",
      "[CV]  hidden_layer_sizes=(600, 600, 600, 600, 600, 600), total=  34.3s\n",
      "[CV] hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700) ..........\n",
      "[CV]  hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700), total=  53.7s\n",
      "[CV] hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700) ..........\n",
      "[CV]  hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700), total=  53.9s\n",
      "[CV] hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700) ..........\n",
      "[CV]  hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700), total=  53.7s\n",
      "[CV] hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700) ..........\n",
      "[CV]  hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700), total=  53.8s\n",
      "[CV] hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700) ..........\n",
      "[CV]  hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700), total=  54.0s\n",
      "[CV] hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800) .....\n",
      "[CV]  hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800), total= 1.4min\n",
      "[CV] hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800) .....\n",
      "[CV]  hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800), total= 1.5min\n",
      "[CV] hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800) .....\n",
      "[CV]  hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800), total= 1.4min\n",
      "[CV] hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800) .....\n",
      "[CV]  hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800), total= 1.4min\n",
      "[CV] hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800) .....\n",
      "[CV]  hidden_layer_sizes=(800, 800, 800, 800, 800, 800, 800, 800), total= 1.4min\n",
      "[CV] hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900) \n",
      "[CV]  hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900), total= 2.0min\n",
      "[CV] hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900) \n",
      "[CV]  hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900), total= 2.0min\n",
      "[CV] hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900) \n",
      "[CV]  hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900), total= 2.0min\n",
      "[CV] hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900) \n",
      "[CV]  hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900), total= 2.0min\n",
      "[CV] hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900) \n",
      "[CV]  hidden_layer_sizes=(900, 900, 900, 900, 900, 900, 900, 900, 900), total= 2.0min\n",
      "[CV] hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000) \n",
      "[CV]  hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000), total=  15.5s\n",
      "[CV] hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000) \n",
      "[CV]  hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000), total= 2.7min\n",
      "[CV] hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000) \n",
      "[CV]  hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000), total=  15.5s\n",
      "[CV] hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000) \n",
      "[CV]  hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000), total=  15.6s\n",
      "[CV] hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000) \n",
      "[CV]  hidden_layer_sizes=(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000), total= 2.7min\n",
      "[CV] hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100) \n",
      "[CV]  hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100), total=  19.8s\n",
      "[CV] hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100) \n",
      "[CV]  hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100), total= 3.6min\n",
      "[CV] hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100) \n",
      "[CV]  hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100), total= 3.6min\n",
      "[CV] hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100) \n",
      "[CV]  hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100), total= 3.6min\n",
      "[CV] hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100) \n",
      "[CV]  hidden_layer_sizes=(1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100), total= 3.6min\n",
      "[CV] hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200) \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV]  hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200), total=  22.7s\n",
      "[CV] hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200) \n",
      "[CV]  hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200), total=  25.7s\n",
      "[CV] hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200) \n",
      "[CV]  hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200), total=  22.7s\n",
      "[CV] hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200) \n",
      "[CV]  hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200), total= 4.3min\n",
      "[CV] hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200) \n",
      "[CV]  hidden_layer_sizes=(1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200), total= 3.0min\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done  60 out of  60 | elapsed: 56.5min finished\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best estimator for Neural Network After Feb 1: \n",
      " MLPRegressor(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,\n",
      "             beta_2=0.999, early_stopping=False, epsilon=1e-08,\n",
      "             hidden_layer_sizes=(700, 700, 700, 700, 700, 700, 700),\n",
      "             learning_rate='constant', learning_rate_init=0.001, max_fun=15000,\n",
      "             max_iter=200, momentum=0.9, n_iter_no_change=10,\n",
      "             nesterovs_momentum=True, power_t=0.5, random_state=None,\n",
      "             shuffle=True, solver='adam', tol=0.0001, validation_fraction=0.1,\n",
      "             verbose=False, warm_start=False)\n",
      "Best score for Neural Network After Feb 1:  1040.2862944667077\n",
      "Best parameters for Neural Network After Feb 1:  {'hidden_layer_sizes': (700, 700, 700, 700, 700, 700, 700)}\n"
     ]
    }
   ],
   "source": [
    "df = pd.read_csv('all.csv')\n",
    "df1 = df.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum, 'followers' : np.sum, 'retweets' : np.sum, 'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "df_5 = pd.read_csv('all_5mins.csv')\n",
    "df_5 = df_5.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum,  'followers' : np.sum, 'retweets' : np.sum, 'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "t1 = df1.query('date < 20150201 or (date == 20150201 and time < 8)')\n",
    "t2 = df_5.query('date == 20150201 and (time >= 800 and time <= 2000)')\n",
    "t3 = df1.query('date > 20150201 or (date == 20150201 and time > 20)')\n",
    "param = {'hidden_layer_sizes':[(100,), (200,200,), (300,300,300,), (400,400,400,400,),\n",
    "                               (500,500,500,500,500,), (600,600,600,600,600,600,),\n",
    "                               (700,700,700,700,700,700,700,), (800,800,800,800,800,800,800,800,),\n",
    "                               (900,900,900,900,900,900,900,900,900,), (1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,),\n",
    "                               (1100,1100,1100,1100,1100,1100,1100,1100,1100,1100,1100,),\n",
    "                               (1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,1200,)] }\n",
    "X = t1.loc[:,'tweets':].values\n",
    "X = StandardScaler().fit_transform(X)\n",
    "y = t1['tweets'].values\n",
    "nn = MLPRegressor()\n",
    "clf = GridSearchCV(nn,param,cv=KFold(n_splits=5,shuffle=True),scoring='neg_mean_squared_error',verbose=2)\n",
    "clf.fit(X,y)\n",
    "print(\"Best estimator for Neural Network Before Feb 1: \\n\", clf.best_estimator_)\n",
    "print(\"Best score for Neural Network Before Feb 1: \", -1*clf.best_score_)\n",
    "print(\"Best parameters for Neural Network Before Feb 1: \", clf.best_params_)\n",
    "\n",
    "X = t2.loc[:,'tweets':].values\n",
    "X = StandardScaler().fit_transform(X)\n",
    "y = t2['tweets'].values\n",
    "nn = MLPRegressor()\n",
    "clf = GridSearchCV(nn,param,cv=KFold(n_splits=5,shuffle=True),scoring='neg_mean_squared_error',verbose=2)\n",
    "clf.fit(X,y)\n",
    "print(\"Best estimator for Neural Network Between Feb 1: \\n\", clf.best_estimator_)\n",
    "print(\"Best score for Neural Network Between Feb 1: \", -1*clf.best_score_)\n",
    "print(\"Best parameters for Neural Network Between Feb 1: \", clf.best_params_)\n",
    "\n",
    "X = t3.loc[:,'tweets':].values\n",
    "X = StandardScaler().fit_transform(X)\n",
    "y = t3['tweets'].values\n",
    "nn = MLPRegressor()\n",
    "clf = GridSearchCV(nn,param,cv=KFold(n_splits=5,shuffle=True),scoring='neg_mean_squared_error',verbose=2)\n",
    "clf.fit(X,y)\n",
    "print(\"Best estimator for Neural Network After Feb 1: \\n\", clf.best_estimator_)\n",
    "print(\"Best score for Neural Network After Feb 1: \", -1*clf.best_score_)\n",
    "print(\"Best parameters for Neural Network After Feb 1: \", clf.best_params_)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 14"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test MSE for sample0_period1.txt using Neural Network: 139.670598\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a571960a58>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test MSE for sample0_period2.txt using Neural Network: 375500.670269\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a501e8fc50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test MSE for sample0_period3.txt using Neural Network: 108.111593\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a501e67cc0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test MSE for sample1_period1.txt using Neural Network: 118.060749\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a502066668>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test MSE for sample1_period2.txt using Neural Network: 4934106.490588\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a50207a860>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test MSE for sample1_period3.txt using Neural Network: 166.670978\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a501f81208>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test MSE for sample2_period1.txt using Neural Network: 157.589275\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a501ebcb70>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test MSE for sample2_period2.txt using Neural Network: 356.071701\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a501fb0128>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test MSE for sample2_period3.txt using Neural Network: 101.020386\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a50213edd8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "df = pd.read_csv('all.csv')\n",
    "df1 = df.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum, 'followers' : np.sum, 'retweets' : np.sum, 'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "df_5 = pd.read_csv('all_5mins.csv')\n",
    "df_5 = df_5.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum,  'followers' : np.sum, 'retweets' : np.sum, 'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "t1 = df1.query('date < 20150201 or (date == 20150201 and time < 8)')\n",
    "t2 = df_5.query('date == 20150201 and (time >= 800 and time <= 2000)')\n",
    "t3 = df1.query('date > 20150201 or (date == 20150201 and time > 20)')\n",
    "X = t1.loc[:,'tweets':].values\n",
    "ss = StandardScaler()\n",
    "X = ss.fit_transform(X)\n",
    "y = t1['tweets'].values\n",
    "nn = MLPRegressor(hidden_layer_sizes=(600,600,600,600,600,600,))\n",
    "nn.fit(X,y)\n",
    "\n",
    "test_files = 'sample0_period1.txt', 'sample0_period2.txt', 'sample0_period3.txt','sample1_period1.txt','sample1_period2.txt','sample1_period3.txt','sample2_period1.txt','sample2_period2.txt','sample2_period3.txt'\n",
    "for test_file in test_files:\n",
    "    tweetfile = test_file\n",
    "    file = []\n",
    "    with open(tweetfile,encoding=\"utf8\") as f:\n",
    "        for line in f:\n",
    "            file.append(line)\n",
    "    pst_tz = pytz.timezone('America/Los_Angeles')\n",
    "    date,time,num_tweets,num_follow,num_retweets,num_mentions,rank_score,num_hashtags = [],[],[],[],[],[],[],[]\n",
    "    time_5 = []\n",
    "    for n,line in enumerate(file):\n",
    "        tw = json.loads(line)\n",
    "        timestamp = tw['citation_date']\n",
    "        timestamp = str(datetime.datetime.fromtimestamp(int(timestamp), pst_tz))\n",
    "        time_split = ''.join(timestamp[0:10].split('-'))\n",
    "        date.append(int(time_split))\n",
    "        time.append(int(timestamp[11:13]))\n",
    "        a,b,c,_ = timestamp.split(':')\n",
    "        rounded = str(int((int(b)/5))*5).zfill(2)\n",
    "        time_mins = timestamp[11:13] + rounded\n",
    "        time_5.append(int(time_mins))\n",
    "        num_tweets.append(1)\n",
    "        num_follow.append(tw['author']['followers'])\n",
    "        num_retweets.append(tw['metrics']['citations']['total'])\n",
    "        num_mentions.append(len(tw['tweet']['entities']['user_mentions']))\n",
    "        rank_score.append(tw['metrics']['ranking_score'])\n",
    "        num_hashtags.append(tw['title'].count('#'))\n",
    "    sp = pd.DataFrame({'date':date,'time':time,'tweets':num_tweets,'followers':num_follow,'retweets':num_retweets,'mentions':num_mentions,'score':rank_score,'hashtags':num_hashtags},\n",
    "                      columns=['date','time','tweets', 'followers', 'retweets','mentions','score','hashtags'])\n",
    "    sp = sp.groupby(['date', 'time']).agg({'time' : np.max, 'tweets' : np.sum,  'followers' : np.sum, 'retweets' : np.sum, 'mentions' : np.sum, 'score' : np.sum, 'hashtags' : np.sum})\n",
    "    X_test = sp.loc[:,'tweets':].values\n",
    "    X_test = ss.transform(X_test)\n",
    "    y_test = sp['tweets'].values\n",
    "    y_pred = nn.predict(X_test)\n",
    "    print(\"Test MSE for %s using Neural Network: %.6f\" % (tweetfile, mean_squared_error(y_test,y_pred)))\n",
    "    plt.figure()\n",
    "    plt.plot(y_test,y_pred,'ro')\n",
    "    plt.xlabel('Actual number of tweets');plt.ylabel('Predicted number of tweets'); plt.title('For '+str(test_file))\n",
    "    plt.show()\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
